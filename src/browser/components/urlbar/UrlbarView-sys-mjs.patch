diff --git a/browser/components/urlbar/UrlbarView.sys.mjs b/browser/components/urlbar/UrlbarView.sys.mjs
index fdbab8806fd320f4aacec46a42c8ef953580d00c..2a6f22178aa42e8f1a7d0b58e02db85f712b01dc 100644
--- a/browser/components/urlbar/UrlbarView.sys.mjs
+++ b/browser/components/urlbar/UrlbarView.sys.mjs
@@ -613,7 +613,7 @@ export class UrlbarView {
       !this.input.value ||
       this.input.getAttribute("pageproxystate") == "valid"
     ) {
-      if (!this.isOpen && ["mousedown", "command"].includes(event.type)) {
+      if (!this.isOpen && ["mousedown", "click", "command"].includes(event.type)) {
         // Try to reuse the cached top-sites context. If it's not cached, then
         // there will be a gap of time between when the input is focused and
         // when the view opens that can be perceived as flicker.
@@ -824,6 +824,26 @@ export class UrlbarView {
         // still associated with the first result.
         this.input.setResultForCurrentValue(firstResult);
       }
+      if (queryContext.results[0].payload.zenAction) {
+        this.window.setTimeout(() => {
+          this.window.setTimeout(() => {
+            this.#selectElement(this.getFirstSelectableElement(), {
+              updateInput: false,
+              setAccessibleFocus:
+                this.controller._userSelectionBehavior == "arrow",
+            });
+          });
+        });
+      }
+      this.window.setTimeout(() => {
+        if (queryContext.results[0].payload.zenAction) {
+          this.#selectElement(this.getFirstSelectableElement(), {
+            updateInput: false,
+            setAccessibleFocus:
+              this.controller._userSelectionBehavior == "arrow",
+          });
+        }
+      }, 220);
     }
 
     // Announce tab-to-search results to screen readers as the user types.
@@ -2706,6 +2726,8 @@ export class UrlbarView {
       if (row?.hasAttribute("row-selectable")) {
         row?.toggleAttribute("selected", true);
       }
+      // only scroll if its not already fully visible
+      element.scrollIntoView({ behavior: "smooth", block: "nearest" });
       if (element != row) {
         row?.toggleAttribute("descendant-selected", true);
       }
@@ -3189,7 +3211,7 @@ export class UrlbarView {
   }
 
   #enableOrDisableRowWrap() {
-    let wrap = getBoundsWithoutFlushing(this.input.textbox).width < 650;
+    let wrap = false;
     this.#rows.toggleAttribute("wrap", wrap);
     this.oneOffSearchButtons.container.toggleAttribute("wrap", wrap);
   }
