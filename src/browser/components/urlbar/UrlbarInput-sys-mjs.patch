diff --git a/browser/components/urlbar/UrlbarInput.sys.mjs b/browser/components/urlbar/UrlbarInput.sys.mjs
index db1a780f36d16c1b63ad50af76887b16e88ca8fe..dee34ba81aae1fd961e7c01f10e485458c01977c 100644
--- a/browser/components/urlbar/UrlbarInput.sys.mjs
+++ b/browser/components/urlbar/UrlbarInput.sys.mjs
@@ -68,6 +68,13 @@ XPCOMUtils.defineLazyPreferenceGetter(
   false
 );
 
+XPCOMUtils.defineLazyPreferenceGetter(
+  lazy,
+  "ZEN_URLBAR_BEHAVIOR",
+  "zen.urlbar.behavior",
+  'default'
+);
+
 const DEFAULT_FORM_HISTORY_NAME = "searchbar-history";
 const SEARCH_BUTTON_CLASS = "urlbar-search-button";
 
@@ -380,7 +387,16 @@ export class UrlbarInput {
     // See _on_select().  HTMLInputElement.select() dispatches a "select"
     // event but does not set the primary selection.
     this._suppressPrimaryAdjustment = true;
+    const zenToolbox = this.document.getElementById("navigator-toolbox");
+    this.window.document.documentElement.setAttribute("supress-primary-adjustment", !(
+      zenToolbox.hasAttribute("zen-has-hover") ||
+      zenToolbox.hasAttribute("zen-has-empty-tab") ||
+      zenToolbox.hasAttribute("zen-user-show")
+    ));
     this.inputField.select();
+    this.document.ownerGlobal.setTimeout(() => {
+      this.window.document.documentElement.removeAttribute("supress-primary-adjustment");
+    }, 0);
     this._suppressPrimaryAdjustment = false;
   }
 
@@ -456,6 +472,10 @@ export class UrlbarInput {
     hideSearchTerms = false,
     isSameDocument = false
   ) {
+    if (this.hasAttribute("zen-newtab")) {
+      return;
+    }
+
     // We only need to update the searchModeUI on tab switch conditionally
     // as we only persist searchMode with ScotchBonnet enabled.
     if (
@@ -728,8 +748,16 @@ export class UrlbarInput {
         return;
       }
     }
-
+    const zenToolbox = this.document.getElementById("navigator-toolbox");
+    this.window.document.documentElement.setAttribute("supress-primary-adjustment", !(
+      zenToolbox.hasAttribute("zen-has-hover") ||
+      zenToolbox.hasAttribute("zen-has-empty-tab") ||
+      zenToolbox.hasAttribute("zen-user-show")
+    ));
     this.handleNavigation({ event });
+    this.document.ownerGlobal.setTimeout(() => {
+      this.window.document.documentElement.removeAttribute("supress-primary-adjustment");
+    }, 0);
   }
 
   /**
@@ -1143,7 +1171,11 @@ export class UrlbarInput {
     }
 
     if (!this.#providesSearchMode(result)) {
-      this.view.close({ elementPicked: true });
+      if (this._zenHandleUrlbarClose) {
+        this._zenHandleUrlbarClose(true, true);
+      } else {
+        this.view.close({ elementPicked: true });
+      }
     }
 
     if (isCanonized) {
@@ -2208,6 +2240,10 @@ export class UrlbarInput {
     await this.#updateLayoutBreakoutDimensions();
   }
 
+  async zenUpdateLayoutBreakout() {
+    await this.#updateLayoutBreakout();
+  }
+
   startLayoutExtend() {
     if (!this.#allowBreakout || this.hasAttribute("breakout-extend")) {
       // Do not expand if the Urlbar does not support being expanded or it is
@@ -2222,6 +2258,12 @@ export class UrlbarInput {
 
     this.setAttribute("breakout-extend", "true");
 
+    if (lazy.ZEN_URLBAR_BEHAVIOR == 'float' || (lazy.ZEN_URLBAR_BEHAVIOR == 'floating-on-type' && !this.focusedViaMousedown)) {
+      this.setAttribute("zen-floating-urlbar", "true");
+      this.window.gZenUIManager.onFloatingURLBarOpen();
+    } else {
+      this.removeAttribute("zen-floating-urlbar");
+    }
     // Enable the animation only after the first extend call to ensure it
     // doesn't run when opening a new window.
     if (!this.hasAttribute("breakout-extend-animate")) {
@@ -2241,6 +2283,24 @@ export class UrlbarInput {
       return;
     }
 
+    if (this._zenHandleUrlbarClose) {
+      this._zenHandleUrlbarClose();
+    }
+    
+    // Arc like URLbar: Blur the input on exit
+    const zenToolbox = this.document.getElementById("navigator-toolbox");
+    this.window.document.documentElement.setAttribute("supress-primary-adjustment", !(
+      zenToolbox.hasAttribute("zen-has-hover") ||
+      zenToolbox.hasAttribute("zen-has-empty-tab") ||
+      zenToolbox.hasAttribute("zen-user-show")
+    ));
+    this.window.gBrowser.selectedBrowser.focus();
+    this.document.ownerGlobal.setTimeout(() => {
+      this.window.document.documentElement.removeAttribute("supress-primary-adjustment");
+    }, 0);
+    
+    this.removeAttribute("zen-floating-urlbar");
+
     this.removeAttribute("breakout-extend");
     this.#updateTextboxPosition();
   }
@@ -2570,7 +2630,7 @@ export class UrlbarInput {
 
         this.textbox.parentNode.style.setProperty(
           "--urlbar-container-height",
-          px(getBoundsWithoutFlushing(this.textbox.parentNode).height)
+          px(getBoundsWithoutFlushing(this.textbox.parentNode).height + 8)
         );
         this.textbox.style.setProperty(
           "--urlbar-height",
@@ -2985,6 +3045,7 @@ export class UrlbarInput {
   }
 
   _toggleActionOverride(event) {
+    if (!Services.prefs.getBoolPref("zen.urlbar.enable-overrides")) return;
     if (
       event.keyCode == KeyEvent.DOM_VK_SHIFT ||
       event.keyCode == KeyEvent.DOM_VK_ALT ||
@@ -3086,7 +3147,7 @@ export class UrlbarInput {
    */
   _trimValue(val) {
     let trimmedValue = lazy.UrlbarPrefs.get("trimURLs")
-      ? lazy.BrowserUIUtils.trimURL(val)
+      ? this._zenTrimURL(val)
       : val;
     // Only trim value if the directionality doesn't change to RTL and we're not
     // showing a strikeout https protocol.
@@ -3459,6 +3520,10 @@ export class UrlbarInput {
       }
       reuseEmpty = true;
     }
+    if (this.hasAttribute("zen-newtab")) {
+      where = "tab";
+      reuseEmpty = true;
+    }
     if (
       where == "tab" &&
       reuseEmpty &&
@@ -3466,6 +3531,9 @@ export class UrlbarInput {
     ) {
       where = "current";
     }
+    if (this.window.gBrowser.selectedTab.hasAttribute("zen-empty-tab")) {
+      return "tab"; // Always open in a new tab if the current tab is "our empty tab".
+    }
     return where;
   }
 
@@ -3723,6 +3791,7 @@ export class UrlbarInput {
       this.setResultForCurrentValue(null);
       this.handleCommand();
       this.controller.clearLastQueryContextCache();
+      this.view.close();
 
       this._suppressStartQuery = false;
     });
@@ -3730,7 +3799,6 @@ export class UrlbarInput {
     contextMenu.addEventListener("popupshowing", () => {
       // Close the results pane when the input field contextual menu is open,
       // because paste and go doesn't want a result selection.
-      this.view.close();
 
       let controller =
         this.document.commandDispatcher.getControllerForCommand("cmd_paste");
@@ -4138,6 +4206,7 @@ export class UrlbarInput {
 
     this.document.l10n.setAttributes(
       this.inputField,
+      this.window.gZenVerticalTabsManager._hasSetSingleToolbar ? 'zen-singletoolbar-urlbar-placeholder-with-name' :
       l10nId,
       l10nId == "urlbar-placeholder-with-name" ? { name } : undefined
     );
@@ -4249,6 +4318,11 @@ export class UrlbarInput {
   }
 
   _on_click(event) {
+    if (event.target == this.inputField) {
+      event.zenOriginalTarget = this.textbox;
+      this._on_mousedown(event);
+    }
+
     if (
       event.target == this.inputField ||
       event.target == this._inputContainer ||
@@ -4320,7 +4394,7 @@ export class UrlbarInput {
       }
     }
 
-    if (this.focusedViaMousedown) {
+    if (this.focusedViaMousedown || this.hasAttribute("zen-newtab")) {
       this.view.autoOpen({ event });
     } else {
       if (this._untrimOnFocusAfterKeydown) {
@@ -4360,9 +4434,16 @@ export class UrlbarInput {
   }
 
   _on_mousedown(event) {
-    switch (event.currentTarget) {
+    switch (event.zenOriginalTarget || event.currentTarget) {
       case this.textbox: {
         this._mousedownOnUrlbarDescendant = true;
+        const isProbablyFloating =
+          (lazy.ZEN_URLBAR_BEHAVIOR == "floating-on-type" &&
+          this.hasAttribute("breakout-extend") && !this.focusedViaMousedown) ||
+          (lazy.ZEN_URLBAR_BEHAVIOR == "float") || this.window.gZenVerticalTabsManager._hasSetSingleToolbar;
+        if (event.type != "click" && isProbablyFloating || event.type == "click" && !isProbablyFloating) {
+          return true;
+        }
 
         if (
           event.target != this.inputField &&
@@ -4374,6 +4455,10 @@ export class UrlbarInput {
 
         this.focusedViaMousedown = !this.focused;
         this._preventClickSelectsAll = this.focused;
+        if (isProbablyFloating) {
+          this.focusedViaMousedown = !this.hasAttribute("breakout-extend");
+          this._preventClickSelectsAll = this.hasAttribute("breakout-extend");
+        }
 
         // Keep the focus status, since the attribute may be changed
         // upon calling this.focus().
@@ -4414,7 +4499,7 @@ export class UrlbarInput {
         }
         // Don't close the view when clicking on a tab; we may want to keep the
         // view open on tab switch, and the TabSelect event arrived earlier.
-        if (event.target.closest("tab")) {
+        if (event.target.closest("tab") || event.target.closest("#tabs-newtab-button")) {
           break;
         }
 
