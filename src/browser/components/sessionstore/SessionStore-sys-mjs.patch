diff --git a/browser/components/sessionstore/SessionStore.sys.mjs b/browser/components/sessionstore/SessionStore.sys.mjs
index f814772114948f87cbb3c3a7231c95ea1f68d776..296cce151690b31a6e136dd5046a2697fb46fe45 100644
--- a/browser/components/sessionstore/SessionStore.sys.mjs
+++ b/browser/components/sessionstore/SessionStore.sys.mjs
@@ -3881,6 +3881,7 @@ var SessionStoreInternal = {
         aWindow.gBrowser.selectedTab = newTab;
       }
 
+      if (aTab.hasAttribute("zenDefaultUserContextId")) newTab.setAttribute("zenDefaultUserContextId", true);
       // Restore the state into the new tab.
       this.restoreTab(newTab, tabState, {
         restoreImmediately: aRestoreImmediately,
@@ -5355,14 +5356,14 @@ var SessionStoreInternal = {
     }
 
     let tabbrowser = aWindow.gBrowser;
-    let tabs = tabbrowser.tabs;
+    let tabs = aWindow.ZenWorkspaces.allStoredTabs;
     /** @type {WindowStateData} */
     let winData = this._windows[aWindow.__SSi];
     let tabsData = (winData.tabs = []);
 
     // update the internal state data for this window
     for (let tab of tabs) {
-      if (tab == aWindow.FirefoxViewHandler.tab) {
+      if (tab == aWindow.FirefoxViewHandler.tab || tab.hasAttribute("zen-empty-tab")) {
         continue;
       }
       let tabData = lazy.TabState.collect(tab, TAB_CUSTOM_VALUES.get(tab));
@@ -6086,6 +6087,18 @@ var SessionStoreInternal = {
 
     // Most of tabData has been restored, now continue with restoring
     // attributes that may trigger external events.
+    if (tabData.zenEssential) {
+      tab.setAttribute("zen-essential", "true");
+    }
+    if (tabData.zenIsEmpty) {
+      tab.setAttribute("zen-empty-tab", "true");
+    }
+    if (tabData.zenHasStaticLabel) {
+      tab.setAttribute("zen-has-static-label", "true");
+    }
+    if (tabData.zenPinnedId) {
+      tab.setAttribute("zen-pin-id", tabData.zenPinnedId);
+    }
 
     if (tabData.pinned) {
       tabbrowser.pinTab(tab);
