diff --git a/browser/components/sessionstore/SessionStore.sys.mjs b/browser/components/sessionstore/SessionStore.sys.mjs
index 11794372f8ff13387b54dabdf4111dfdb89ea998..0e51251a579cee759f25272894c82a1744d79b26 100644
--- a/browser/components/sessionstore/SessionStore.sys.mjs
+++ b/browser/components/sessionstore/SessionStore.sys.mjs
@@ -2088,7 +2088,6 @@ var SessionStoreInternal = {
       if (closedWindowState) {
         let newWindowState;
         if (
-          AppConstants.platform == "macosx" ||
           !lazy.SessionStartup.willRestore()
         ) {
           // We want to split the window up into pinned tabs and unpinned tabs.
@@ -2303,11 +2302,9 @@ var SessionStoreInternal = {
           tabbrowser.selectedTab.label;
       }
 
-      if (AppConstants.platform != "macosx") {
         // Until we decide otherwise elsewhere, this window is part of a series
         // of closing windows to quit.
         winData._shouldRestore = true;
-      }
 
       // Store the window's close date to figure out when each individual tab
       // was closed. This timestamp should allow re-arranging data based on how
@@ -3209,7 +3206,7 @@ var SessionStoreInternal = {
     if (!isPrivateWindow && tabState.isPrivate) {
       return;
     }
-    if (aTab == aWindow.FirefoxViewHandler.tab) {
+    if (aTab == aWindow.FirefoxViewHandler.tab || aTab.hasAttribute("zen-empty-tab")) {
       return;
     }
 
@@ -3918,6 +3915,9 @@ var SessionStoreInternal = {
         Math.min(tabState.index, tabState.entries.length)
       );
       tabState.pinned = false;
+      tabState.zenEssential = false;
+      tabState.zenPinnedId = null;
+      tabState.zenHasStaticLabel = false;
 
       if (inBackground === false) {
         aWindow.gBrowser.selectedTab = newTab;
@@ -5232,7 +5232,7 @@ var SessionStoreInternal = {
     }
 
     let workspaceID = aWindow.getWorkspaceID();
-    if (workspaceID) {
+    if (workspaceID && !(this.isLastRestorableWindow() && AppConstants.platform == "macosx")) {
       winData.workspaceID = workspaceID;
     }
   },
@@ -5423,14 +5423,15 @@ var SessionStoreInternal = {
     }
 
     let tabbrowser = aWindow.gBrowser;
-    let tabs = tabbrowser.tabs;
+    let tabs = aWindow.gZenWorkspaces.allStoredTabs;
     /** @type {WindowStateData} */
     let winData = this._windows[aWindow.__SSi];
     let tabsData = (winData.tabs = []);
 
+    winData.splitViewData = aWindow.gZenViewSplitter?.storeDataForSessionStore();
     // update the internal state data for this window
     for (let tab of tabs) {
-      if (tab == aWindow.FirefoxViewHandler.tab) {
+      if (tab == aWindow.FirefoxViewHandler.tab || tab.hasAttribute("zen-empty-tab")) {
         continue;
       }
       let tabData = lazy.TabState.collect(tab, TAB_CUSTOM_VALUES.get(tab));
@@ -5449,7 +5450,7 @@ var SessionStoreInternal = {
     // We don't store the Firefox View tab in Session Store, so if it was the last selected "tab" when
     // a window is closed, point to the first item in the tab strip instead (it will never be the Firefox View tab,
     // since it's only inserted into the tab strip after it's selected).
-    if (aWindow.FirefoxViewHandler.tab?.selected) {
+    if (aWindow.FirefoxViewHandler.tab?.selected || tabbrowser.selectedTab.hasAttribute("zen-empty-tab")) {
       selectedIndex = 1;
       winData.title = tabbrowser.tabs[0].label;
     }
@@ -5606,6 +5607,7 @@ var SessionStoreInternal = {
         winData.tabs,
         winData.groups ?? []
       );
+      aWindow.gZenViewSplitter?.restoreDataFromSessionStore(winData.splitViewData);
       this._log.debug(
         `restoreWindow, createTabsForSessionRestore returned ${tabs.length} tabs`
       );
@@ -6155,8 +6157,23 @@ var SessionStoreInternal = {
 
     // Most of tabData has been restored, now continue with restoring
     // attributes that may trigger external events.
+    if (tabData.zenEssential) {
+      tab.setAttribute("zen-essential", "true");
+    }
+    if (tabData.zenIsEmpty) {
+      tab.setAttribute("zen-empty-tab", "true");
+    }
+    if (tabData.zenHasStaticLabel) {
+      tab.setAttribute("zen-has-static-label", "true");
+    }
+    if (tabData.zenPinnedId) {
+      tab.setAttribute("zen-pin-id", tabData.zenPinnedId);
+    }
+    if (tabData.zenDefaultUserContextId) {
+      tab.setAttribute("zenDefaultUserContextId", true);
+    }
 
-    if (tabData.pinned) {
+    if (tabData.pinned || tabData.zenEssential) {
       tabbrowser.pinTab(tab);
     } else {
       tabbrowser.unpinTab(tab);
