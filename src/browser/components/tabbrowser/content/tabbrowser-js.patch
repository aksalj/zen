diff --git a/browser/components/tabbrowser/content/tabbrowser.js b/browser/components/tabbrowser/content/tabbrowser.js
index 96fd8acdc09cc4c9649d1ed7503c2a0bde536613..87fb109037d13183e76184201de600a92b6a07d6 100644
--- a/browser/components/tabbrowser/content/tabbrowser.js
+++ b/browser/components/tabbrowser/content/tabbrowser.js
@@ -422,15 +422,49 @@
       return this.tabContainer.visibleTabs;
     }
 
+    get _numVisiblePinTabsWithoutCollapsed() {
+      let i = 0;
+      for (let item of this.tabContainer.ariaFocusableItems) {
+        if (this.isTabGroupLabel(item) && item.closest("tab-group")?.pinned) {
+          i += 1;
+          continue;
+        }
+        if (!item.pinned && !item.hasAttribute("zen-glance-tab")) {
+          break;
+        }
+        if ((!item.group?.hasAttribute("split-view-group") && !item.group?.collapsed) && !item.hidden) {
+          i += !item.hasAttribute("zen-glance-tab");
+        }
+      }
+      return i;
+    }
+
+    get _numZenEssentials() {
+      let i = 0;
+      for (let tab of this.tabs) {
+        if (!tab.hasAttribute("zen-essential") && !tab.hasAttribute("zen-glance-tab")) {
+          break;
+        }
+        i += !tab.hasAttribute("zen-glance-tab");
+      }
+      return i;
+    }
+
     get pinnedTabCount() {
-      for (var i = 0; i < this.tabs.length; i++) {
-        if (!this.tabs[i].pinned) {
+      let i = 0;
+      for (let tab of this.tabs) {
+        if (!tab.pinned && !tab.hasAttribute("zen-glance-tab")) {
           break;
         }
+        i += !tab.hasAttribute("zen-glance-tab");
       }
       return i;
     }
 
+    get tabsWithoutGlance() {
+      return this.tabs.filter(tab => !tab.hasAttribute("zen-glance-tab"));
+    }
+
     set selectedTab(val) {
       if (
         gSharedTabWarning.willShowSharedTabWarning(val) ||
@@ -578,6 +612,7 @@
       this.tabpanels.appendChild(panel);
 
       let tab = this.tabs[0];
+      gZenWorkspaces.handleInitialTab(tab, (!remoteType || remoteType === E10SUtils.PRIVILEGEDABOUT_REMOTE_TYPE) && !gZenUIManager.testingEnabled);
       tab.linkedPanel = uniqueId;
       this._selectedTab = tab;
       this._selectedBrowser = browser;
@@ -858,14 +893,18 @@
       aTab,
       { telemetrySource = this.TabMetrics.METRIC_SOURCE.UNKNOWN } = {}
     ) {
-      if (aTab.pinned || aTab == FirefoxViewHandler.tab) {
+      if (aTab.pinned || aTab == FirefoxViewHandler.tab || aTab.hasAttribute("zen-empty-tab")) {
         return;
       }
 
       this.showTab(aTab);
+      const handled = gZenFolders.handleTabPin(aTab);
+      if (!handled) {
+        this.ungroupTab(aTab);
       this.#handleTabMove(aTab, () =>
-        this.pinnedTabsContainer.appendChild(aTab)
+        aTab.hasAttribute("zen-essential") ? gZenWorkspaces.getEssentialsSection(aTab).appendChild(aTab) : this.pinnedTabsContainer.insertBefore(aTab, this.pinnedTabsContainer.lastChild)
       );
+      }
 
       aTab.setAttribute("pinned", "true");
       this._updateTabBarForPinnedTabs();
@@ -878,11 +917,15 @@
       }
 
       this.#handleTabMove(aTab, () => {
+        const handled = gZenFolders.handleTabUnpin(aTab);
+
         // we remove this attribute first, so that allTabs represents
         // the moving of a tab from the pinned tabs container
         // and back into arrowscrollbox.
         aTab.removeAttribute("pinned");
-        this.tabContainer.arrowScrollbox.prepend(aTab);
+        if (!handled) {
+          gZenWorkspaces.activeWorkspaceStrip.prepend(aTab);
+        }
       });
 
       aTab.style.marginInlineStart = "";
@@ -1060,6 +1103,8 @@
 
       let LOCAL_PROTOCOLS = ["chrome:", "about:", "resource:", "data:"];
 
+      try {
+      gZenPinnedTabManager.onTabIconChanged(aTab, aIconURL);
       if (
         aIconURL &&
         !aLoadingPrincipal &&
@@ -1070,6 +1115,9 @@
         );
         return;
       }
+      } catch (e) {
+        console.warn(e);
+      }
 
       let browser = this.getBrowserForTab(aTab);
       browser.mIconURL = aIconURL;
@@ -1319,6 +1367,7 @@
       if (!this._previewMode) {
         newTab.recordTimeFromUnloadToReload();
         newTab.updateLastAccessed();
+        newTab.removeAttribute("unread");
         oldTab.updateLastAccessed();
         // if this is the foreground window, update the last-seen timestamps.
         if (this.ownerGlobal == BrowserWindowTracker.getTopWindow()) {
@@ -1471,6 +1520,9 @@
       }
 
       let activeEl = document.activeElement;
+      if (gURLBar._zenHandleUrlbarClose) {
+        gURLBar._zenHandleUrlbarClose(true);
+      }
       // If focus is on the old tab, move it to the new tab.
       if (activeEl == oldTab) {
         newTab.focus();
@@ -1794,7 +1846,8 @@
     }
 
     _setTabLabel(aTab, aLabel, { beforeTabOpen, isContentTitle, isURL } = {}) {
-      if (!aLabel || aLabel.includes("about:reader?")) {
+      gZenPinnedTabManager.onTabLabelChanged(aTab);
+      if (!aLabel || aLabel.includes("about:reader?") || aTab.hasAttribute("zen-has-static-label")) {
         return false;
       }
 
@@ -1902,7 +1955,7 @@
         newIndex = this.selectedTab._tPos + 1;
       }
 
-      if (replace) {
+      if (replace && !(!targetTab && this.selectedTab?.hasAttribute('zen-empty-tab'))) {
         if (this.isTabGroupLabel(targetTab)) {
           throw new Error(
             "Replacing a tab group label with a tab is not supported"
@@ -2166,6 +2219,7 @@
       uriIsAboutBlank,
       userContextId,
       skipLoad,
+      _forZenEmptyTab,
     } = {}) {
       let b = document.createXULElement("browser");
       // Use the JSM global to create the permanentKey, so that if the
@@ -2239,8 +2293,7 @@
         // we use a different attribute name for this?
         b.setAttribute("name", name);
       }
-
-      if (this._allowTransparentBrowser) {
+      if (this._allowTransparentBrowser || _forZenEmptyTab) {
         b.setAttribute("transparent", "true");
       }
 
@@ -2405,7 +2458,7 @@
 
       let panel = this.getPanel(browser);
       let uniqueId = this._generateUniquePanelID();
-      panel.id = uniqueId;
+      if (!panel.id?.startsWith("zen-")) panel.id = uniqueId;
       aTab.linkedPanel = uniqueId;
 
       // Inject the <browser> into the DOM if necessary.
@@ -2464,8 +2517,8 @@
       // If we transitioned from one browser to two browsers, we need to set
       // hasSiblings=false on both the existing browser and the new browser.
       if (this.tabs.length == 2) {
-        this.tabs[0].linkedBrowser.browsingContext.hasSiblings = true;
-        this.tabs[1].linkedBrowser.browsingContext.hasSiblings = true;
+        if (this.tabs[0].linkedBrowser.browsingContext) this.tabs[0].linkedBrowser.browsingContext.hasSiblings = true;
+        if (this.tabs[1].linkedBrowser.browsingContext) this.tabs[1].linkedBrowser.browsingContext.hasSiblings = true;
       } else {
         aTab.linkedBrowser.browsingContext.hasSiblings = this.tabs.length > 1;
       }
@@ -2709,6 +2762,8 @@
         schemelessInput,
         hasValidUserGestureActivation = false,
         textDirectiveUserActivation = false,
+        _forZenEmptyTab,
+        essential,
       } = {}
     ) {
       // all callers of addTab that pass a params object need to pass
@@ -2719,6 +2774,12 @@
         );
       }
 
+      let hasZenDefaultUserContextId = false;
+      let zenForcedWorkspaceId = undefined;
+      if (typeof gZenWorkspaces !== "undefined" && !_forZenEmptyTab) {
+        [userContextId, hasZenDefaultUserContextId, zenForcedWorkspaceId] = gZenWorkspaces.getContextIdIfNeeded(userContextId, fromExternal, allowInheritPrincipal);
+      }
+
       if (!UserInteraction.running("browser.tabs.opening", window)) {
         UserInteraction.start("browser.tabs.opening", "initting", window);
       }
@@ -2782,6 +2843,19 @@
           noInitialLabel,
           skipBackgroundNotify,
         });
+        if (hasZenDefaultUserContextId) {
+          t.setAttribute("zenDefaultUserContextId", "true");
+        }
+        if (zenForcedWorkspaceId !== undefined) {
+          t.setAttribute("zen-workspace-id", zenForcedWorkspaceId);
+          t.setAttribute("change-workspace", "")
+        }
+        if (_forZenEmptyTab) {
+          t.setAttribute("zen-empty-tab", "true");
+        }
+        if (essential) {
+          t.setAttribute("zen-essential", "true");
+        }
         if (insertTab) {
           // Insert the tab into the tab container in the correct position.
           this.#insertTabAtIndex(t, {
@@ -2790,6 +2864,7 @@
             ownerTab,
             openerTab,
             pinned,
+            essential,
             bulkOrderedOpen,
             tabGroup: tabGroup ?? openerTab?.group,
           });
@@ -2808,6 +2883,7 @@
           openWindowInfo,
           skipLoad,
           triggeringRemoteType,
+          _forZenEmptyTab,
         }));
 
         if (focusUrlBar) {
@@ -2928,6 +3004,12 @@
         }
       }
 
+      if (typeof window.gZenVerticalTabsManager !== "undefined") {
+        gZenVerticalTabsManager.animateTab(t);
+      }
+      if (typeof window.gZenCompactModeManager !== "undefined" && !skipLoad && insertTab) {
+        gZenCompactModeManager._onTabOpen(t, inBackground);
+      }
       // Additionally send pinned tab events
       if (pinned) {
         this.#notifyPinnedStatus(t);
@@ -3016,10 +3098,10 @@
         isAdoptingGroup = false,
         isUserTriggered = false,
         telemetryUserCreateSource = "unknown",
+        forSplitView = false,
       } = {}
     ) {
       if (!tabs?.length) {
-        throw new Error("Cannot create tab group with zero tabs");
       }
 
       if (!color) {
@@ -3040,7 +3122,12 @@
         label,
         isAdoptingGroup
       );
-      this.tabContainer.insertBefore(
+      if (forSplitView) {
+        group.setAttribute('split-view-group', true);
+      }
+      group.essential = tabs.some(tab => tab.hasAttribute("essential"));
+      group.pinned = group.essential || tabs.some(tab => tab.pinned);
+      ((insertBefore?.group ?? insertBefore).parentNode).insertBefore(
         group,
         insertBefore?.group ?? insertBefore
       );
@@ -3357,6 +3444,7 @@
         openWindowInfo,
         skipLoad,
         triggeringRemoteType,
+        _forZenEmptyTab
       }
     ) {
       // If we don't have a preferred remote type (or it is `NOT_REMOTE`), and
@@ -3426,6 +3514,7 @@
           openWindowInfo,
           name,
           skipLoad,
+          _forZenEmptyTab
         });
       }
 
@@ -3613,7 +3702,7 @@
         // Add a new tab if needed.
         if (!tab) {
           let createLazyBrowser =
-            restoreTabsLazily && !select && !tabData.pinned;
+            restoreTabsLazily && !tabData.pinned;
 
           let url = "about:blank";
           if (tabData.entries?.length) {
@@ -3651,7 +3740,8 @@
             skipLoad: true,
             preferredRemoteType,
           });
-
+          tab._originalUrl = url;
+          gZenSessionStore.restoreInitialTabData(tab, tabData);
           if (select) {
             tabToSelect = tab;
           }
@@ -3663,7 +3753,8 @@
           this.pinTab(tab);
           // Then ensure all the tab open/pinning information is sent.
           this._fireTabOpen(tab, {});
-        } else if (tabData.groupId) {
+        }
+        if (tabData.groupId) {
           let { groupId } = tabData;
           const tabGroup = tabGroupWorkingData.get(groupId);
           // if a tab refers to a tab group we don't know, skip any group
@@ -3677,7 +3768,10 @@
                 tabGroup.stateData.id,
                 tabGroup.stateData.color,
                 tabGroup.stateData.collapsed,
-                tabGroup.stateData.name
+                tabGroup.stateData.name,
+                tabGroup.stateData.pinned,
+                tabGroup.stateData.essential,
+                tabGroup.stateData.splitView,
               );
               tabsFragment.appendChild(tabGroup.node);
             }
@@ -3722,9 +3816,23 @@
       // to remove the old selected tab.
       if (tabToSelect) {
         let leftoverTab = this.selectedTab;
+        if (this._hasAlreadyInitializedZenSessionStore || !gZenWorkspaces.workspaceEnabled) {
         this.selectedTab = tabToSelect;
         this.removeTab(leftoverTab);
+        } else {
+          gZenWorkspaces._tabToRemoveForEmpty = leftoverTab;
+          if (Services.prefs.getBoolPref("zen.workspaces.continue-where-left-off")) {
+            gZenWorkspaces._tabToSelect = selectTab - 2; // -1 for the offset, and another -1 for the empty tab.
+          }
+          if (gZenWorkspaces._initialTab && !gZenVerticalTabsManager._canReplaceNewTab) {
+            gZenWorkspaces._initialTab._shouldRemove = true;
+          }
+        }
       }
+      else {
+        gZenWorkspaces._tabToRemoveForEmpty = this.selectedTab;
+      }
+      this._hasAlreadyInitializedZenSessionStore = true;
 
       if (tabs.length > 1 || !tabs[0].selected) {
         this._updateTabsAfterInsert();
@@ -3919,7 +4027,7 @@
       // Ensure we have an index if one was not provided.
       if (typeof elementIndex != "number" && typeof tabIndex != "number") {
         // Move the new tab after another tab if needed, to the end otherwise.
-        elementIndex = Infinity;
+        elementIndex = Services.prefs.getBoolPref("zen.view.show-newtab-button-top") ? this._numVisiblePinTabsWithoutCollapsed : Infinity;
         if (
           !bulkOrderedOpen &&
           ((openerTab &&
@@ -3942,7 +4050,7 @@
           ) {
             elementIndex = Infinity;
           } else if (previousTab.visible) {
-            elementIndex = previousTab.elementIndex + 1;
+            elementIndex = (typeof previousTab.elementIndex === 'undefined') ? elementIndex : (previousTab.elementIndex + 1);
           } else if (previousTab == FirefoxViewHandler.tab) {
             elementIndex = 0;
           }
@@ -3970,14 +4078,14 @@
       }
       // Ensure index is within bounds.
       if (tab.pinned) {
-        index = Math.max(index, 0);
-        index = Math.min(index, this.pinnedTabCount);
+        index = Math.max(index, tab.hasAttribute("zen-essential") ? 0 : this._numZenEssentials);
+        index = Math.min(index, tab.hasAttribute("zen-essential") ? this._numZenEssentials : this._numVisiblePinTabsWithoutCollapsed);
       } else {
-        index = Math.max(index, this.pinnedTabCount);
+        index = Math.max(index, this._numVisiblePinTabsWithoutCollapsed);
         index = Math.min(index, allItems.length);
       }
       /** @type {MozTabbrowserTab|undefined} */
-      let itemAfter = allItems.at(index);
+      let itemAfter = gZenGlanceManager.getTabOrGlanceParent(allItems.at(index));
 
       // Prevent a flash of unstyled content by setting up the tab content
       // and inherited attributes before appending it (see Bug 1592054):
@@ -3985,7 +4093,7 @@
 
       this.tabContainer._invalidateCachedTabs();
 
-      if (tabGroup) {
+      if (tabGroup && !tabGroup.hasAttribute("split-view-group")) {
         if (this.isTab(itemAfter) && itemAfter.group == tabGroup) {
           // Place at the front of, or between tabs in, the same tab group
           this.tabContainer.insertBefore(tab, itemAfter);
@@ -4018,6 +4126,7 @@
       if (pinned) {
         this._updateTabBarForPinnedTabs();
       }
+      gZenWorkspaces.fixTabInsertLocation(tab, itemAfter);
 
       TabBarVisibility.update();
     }
@@ -4307,6 +4416,9 @@
         return;
       }
 
+      for (let tab of selectedTabs) {
+        gZenPinnedTabManager._removePinnedAttributes(tab, true);
+      }
       this.removeTabs(selectedTabs, { isUserTriggered, telemetrySource });
     }
 
@@ -4568,6 +4680,7 @@
         telemetrySource,
       } = {}
     ) {
+      tabs = tabs.filter(tab => !tab.hasAttribute("zen-empty-tab"));
       // When 'closeWindowWithLastTab' pref is enabled, closing all tabs
       // can be considered equivalent to closing the window.
       if (
@@ -4657,6 +4770,7 @@
         if (lastToClose) {
           this.removeTab(lastToClose, aParams);
         }
+        gZenUIManager.onTabClose(undefined);
       } catch (e) {
         console.error(e);
       }
@@ -4695,6 +4809,12 @@
         aTab._closeTimeNoAnimTimerId = Glean.browserTabclose.timeNoAnim.start();
       }
 
+      if (gZenWorkspaces.workspaceEnabled) {
+        let newTab = gZenWorkspaces.handleTabBeforeClose(aTab, closeWindowWithLastTab);
+        if (newTab) {
+          this.selectedTab = newTab;
+        }
+      }
       // Handle requests for synchronously removing an already
       // asynchronously closing tab.
       if (!animate && aTab.closing) {
@@ -4709,6 +4829,9 @@
       // state).
       let tabWidth = window.windowUtils.getBoundsWithoutFlushing(aTab).width;
       let isLastTab = this.#isLastTabInWindow(aTab);
+      if (gZenGlanceManager.manageTabClose(aTab)) {
+        return;
+      }
       if (
         !this._beginRemoveTab(aTab, {
           closeWindowFastpath: true,
@@ -4891,7 +5014,7 @@
           closeWindowWithLastTab != null
             ? closeWindowWithLastTab
             : !window.toolbar.visible ||
-              Services.prefs.getBoolPref("browser.tabs.closeWindowWithLastTab");
+              Services.prefs.getBoolPref("browser.tabs.closeWindowWithLastTab") && !gZenWorkspaces._isClosingWindow && !gZenWorkspaces._removedByStartupPage;
 
         if (closeWindow) {
           // We've already called beforeunload on all the relevant tabs if we get here,
@@ -4915,6 +5038,7 @@
 
         newTab = true;
       }
+      gZenWorkspaces._removedByStartupPage = false;
       aTab._endRemoveArgs = [closeWindow, newTab];
 
       // swapBrowsersAndCloseOther will take care of closing the window without animation.
@@ -4955,9 +5079,7 @@
       aTab._mouseleave();
 
       if (newTab) {
-        this.addTrustedTab(BROWSER_NEW_TAB_URL, {
-          skipAnimation: true,
-        });
+        gZenWorkspaces.selectEmptyTab(BROWSER_NEW_TAB_URL);
       } else {
         TabBarVisibility.update();
       }
@@ -5090,6 +5212,7 @@
         this.tabs[i]._tPos = i;
       }
 
+      gZenWorkspaces.updateTabsContainers();
       if (!this._windowIsClosing) {
         // update tab close buttons state
         this.tabContainer._updateCloseButtons();
@@ -5302,6 +5425,7 @@
       }
 
       let excludeTabs = new Set(aExcludeTabs);
+      gZenWorkspaces.getTabsToExclude(aTab).forEach(tab => excludeTabs.add(tab));
 
       // If this tab has a successor, it should be selectable, since
       // hiding or closing a tab removes that tab as a successor.
@@ -5314,13 +5438,13 @@
         !excludeTabs.has(aTab.owner) &&
         Services.prefs.getBoolPref("browser.tabs.selectOwnerOnClose")
       ) {
-        return aTab.owner;
+        return gZenWorkspaces.findTabToBlur(aTab.owner);
       }
 
       // Try to find a remaining tab that comes after the given tab
       let remainingTabs = Array.prototype.filter.call(
         this.visibleTabs,
-        tab => !excludeTabs.has(tab)
+        tab => !excludeTabs.has(tab) && gZenWorkspaces._shouldChangeToTab(tab)
       );
 
       let tab = this.tabContainer.findNextTab(aTab, {
@@ -5336,7 +5460,7 @@
       }
 
       if (tab) {
-        return tab;
+        return gZenWorkspaces.findTabToBlur(tab);
       }
 
       // If no qualifying visible tab was found, see if there is a tab in
@@ -5357,7 +5481,7 @@
         });
       }
 
-      return tab;
+      return gZenWorkspaces.findTabToBlur(tab);
     }
 
     _blurTab(aTab) {
@@ -5759,10 +5883,10 @@
       SessionStore.deleteCustomTabValue(aTab, "hiddenBy");
     }
 
-    hideTab(aTab, aSource) {
+    hideTab(aTab, aSource, forZenWorkspaces = false) {
       if (
         aTab.hidden ||
-        aTab.pinned ||
+        (aTab.pinned && !forZenWorkspaces) ||
         aTab.selected ||
         aTab.closing ||
         // Tabs that are sharing the screen, microphone or camera cannot be hidden.
@@ -5952,7 +6076,7 @@
      *   `true` if element is a `<tab-group>`
      */
     isTabGroup(element) {
-      return !!(element?.tagName == "tab-group");
+      return !!(element?.tagName == "tab-group" || element?.tagName == "zen-folder");
     }
 
     /**
@@ -6029,7 +6153,7 @@
 
       // Don't allow mixing pinned and unpinned tabs.
       if (this.isTab(element) && element.pinned) {
-        tabIndex = Math.min(tabIndex, this.pinnedTabCount - 1);
+        tabIndex = element.hasAttribute('zen-essential') ? Math.min(tabIndex, this._numZenEssentials - 1) : Math.min(Math.max(tabIndex, this._numZenEssentials), this.pinnedTabCount - 1);
       } else {
         tabIndex = Math.max(tabIndex, this.pinnedTabCount);
       }
@@ -6055,10 +6179,16 @@
       this.#handleTabMove(
         element,
         () => {
-          let neighbor = this.tabs[tabIndex];
-          if (forceUngrouped && neighbor?.group) {
+          let neighbor = gZenGlanceManager.getTabOrGlanceParent(this.tabs[tabIndex]);
+          if ((forceUngrouped && neighbor?.group) || neighbor?.group?.hasAttribute("split-view-group")) {
             neighbor = neighbor.group;
           }
+          if (element.group?.hasAttribute("split-view-group")) {
+            element = element.group;
+          }
+          if (element.group?.hasAttribute("split-view-group") && neighbor == element.group) {
+            return;
+          }
           if (neighbor && this.isTab(element) && tabIndex > element._tPos) {
             neighbor.after(element);
           } else {
@@ -6122,7 +6252,7 @@
           moveBefore = true;
         }
       }
-      if (this.isTabGroupLabel(element)) {
+      if (this.isTabGroupLabel(element) || element.group?.hasAttribute("split-view-group")) {
         element = element.group;
         if (targetElement?.group) {
           targetElement = targetElement.group;
@@ -6130,8 +6260,12 @@
       }
 
       // Don't allow mixing pinned and unpinned tabs.
+      targetElement = gZenGlanceManager.getTabOrGlanceParent(targetElement);
+      if (element.hasAttribute('zen-essential') && !targetElement?.hasAttribute('zen-essential')) {
+        targetElement = this.tabsWithoutGlance[this._numZenEssentials - 1];
+      } else
       if (element.pinned && !targetElement?.pinned) {
-        targetElement = this.tabs[this.pinnedTabCount - 1];
+        targetElement = this.tabsWithoutGlance[this.pinnedTabCount - 1];
         moveBefore = false;
       } else if (!element.pinned && targetElement && targetElement.pinned) {
         // If the caller asks to move an unpinned element next to a pinned
@@ -6145,7 +6279,7 @@
         //    move the tab group right before the first unpinned tab.
         // 4. Moving a tab group and the first unpinned tab is grouped:
         //    move the tab group right before the first unpinned tab's tab group.
-        targetElement = this.tabs[this.pinnedTabCount];
+        targetElement = this.tabsWithoutGlance[this.pinnedTabCount];
         if (targetElement.group) {
           targetElement = targetElement.group;
         }
@@ -6153,6 +6287,7 @@
       }
 
       let getContainer = () =>
+        element.hasAttribute("zen-essential") ? gZenWorkspaces.getEssentialsSection(element) :
         element.pinned
           ? this.tabContainer.pinnedTabsContainer
           : this.tabContainer;
@@ -6210,7 +6345,7 @@
       if (!this.isTab(aTab)) {
         throw new Error("Can only move a tab into a tab group");
       }
-      if (aTab.pinned) {
+      if (aTab.pinned != !!aGroup.pinned) {
         return;
       }
       if (aTab.group && aTab.group.id === aGroup.id) {
@@ -6304,6 +6439,10 @@
 
       moveActionCallback();
 
+      gZenWorkspaces.makeSureEmptyTabIsFirst();
+      gZenViewSplitter._maybeRemoveFakeBrowser(false);
+      gZenViewSplitter._canDrop = false;
+
       // Clear tabs cache after moving nodes because the order of tabs may have
       // changed.
       this.tabContainer._invalidateCachedTabs();
@@ -7198,7 +7337,7 @@
             // preventDefault(). It will still raise the window if appropriate.
             break;
           }
-          this.selectedTab = tab;
+          gZenWorkspaces.switchTabIfNeeded(tab);
           window.focus();
           aEvent.preventDefault();
           break;
@@ -8143,6 +8282,7 @@
             aWebProgress.isTopLevel
           ) {
             this.mTab.setAttribute("busy", "true");
+            if (!this.mTab.selected) this.mTab.setAttribute("unread", "true");
             gBrowser._tabAttrModified(this.mTab, ["busy"]);
             this.mTab._notselectedsinceload = !this.mTab.selected;
           }
@@ -9108,7 +9248,7 @@ var TabContextMenu = {
     );
     contextUnpinSelectedTabs.hidden =
       !this.contextTab.pinned || !this.multiselected;
-
+    gZenPinnedTabManager.updatePinnedTabContextMenu(this.contextTab);
     // Move Tab items
     let contextMoveTabOptions = document.getElementById(
       "context_moveTabOptions"
@@ -9384,6 +9524,7 @@ var TabContextMenu = {
         )
       );
     } else {
+      gZenPinnedTabManager._removePinnedAttributes(this.contextTab, true);
       gBrowser.removeTab(this.contextTab, {
         animate: true,
         ...gBrowser.TabMetrics.userTriggeredContext(
