diff --git a/browser/components/tabbrowser/content/tabbrowser.js b/browser/components/tabbrowser/content/tabbrowser.js
index 6dece2b9d0462d90a28e75350ce983d87816ef73..4cc07f008d99138a76c8e9813c857c352b425006 100644
--- a/browser/components/tabbrowser/content/tabbrowser.js
+++ b/browser/components/tabbrowser/content/tabbrowser.js
@@ -415,11 +415,58 @@
       return this.tabContainer.visibleTabs;
     }
 
+    zenInsertTabAtIndex(...args) {
+      return this.#insertTabAtElementIndex(...args);
+    }
+
+    get _numVisiblePinTabsWithoutCollapsed() {
+      let i = 0;
+      for (let item of this.tabContainer.ariaFocusableItems) {
+        if (!!item?.classList?.contains("tab-group-label") && item.closest("tab-group").pinned) {
+          i += 1;
+          continue;
+        }
+        if (!item.pinned && !item.hasAttribute("zen-glance-tab")) {
+          break;
+        }
+        if ((!item.group?.hasAttribute("split-view-group") && !item.group?.collapsed) && !item.hidden) {
+          i += !item.hasAttribute("zen-glance-tab");
+        }
+      }
+      return i;
+    }
+
+    get _numZenEssentials() {
+      let i = 0;
+      for (let tab of this.tabs) {
+        if (!tab.hasAttribute("zen-essential") && !tab.hasAttribute("zen-glance-tab")) {
+          break;
+        }
+        i += !tab.hasAttribute("zen-glance-tab");
+      }
+      return i;
+    }
+
+    get _numZenVisibleEssentials() {
+      let i = 0;
+      for (let tab of this.tabs) {
+        if (!tab.hasAttribute("zen-essential") && !tab.hasAttribute("zen-glance-tab")) {
+          break;
+        }
+        if (!tab.hidden) {
+          i += !tab.hasAttribute("zen-glance-tab");
+        }
+      }
+      return i;
+    }
+
     get pinnedTabCount() {
-      for (var i = 0; i < this.tabs.length; i++) {
-        if (!this.tabs[i].pinned) {
+      let i = 0;
+      for (let tab of this.tabs) {
+        if (!tab.pinned && !tab.hasAttribute("zen-glance-tab")) {
           break;
         }
+        i += !tab.hasAttribute("zen-glance-tab");
       }
       return i;
     }
@@ -571,6 +618,7 @@
       this.tabpanels.appendChild(panel);
 
       let tab = this.tabs[0];
+      ZenWorkspaces.handleInitialTab(tab, (!remoteType || remoteType === E10SUtils.PRIVILEGEDABOUT_REMOTE_TYPE) && !gZenUIManager.testingEnabled);
       tab.linkedPanel = uniqueId;
       this._selectedTab = tab;
       this._selectedBrowser = browser;
@@ -836,11 +884,13 @@
       }
 
       this.showTab(aTab);
-      if (this.tabContainer.verticalMode) {
+      const handled = gZenFolders.handleTabPin(aTab);
+      if (!handled) this.ungroupTab(aTab);
+      if (this.tabContainer.verticalMode && !handled) {
         this.#handleTabMove(aTab, () =>
-          this.verticalPinnedTabsContainer.appendChild(aTab)
+          aTab.hasAttribute("zen-essential") ? ZenWorkspaces.getEssentialsSection(aTab).appendChild(aTab) : this.verticalPinnedTabsContainer.insertBefore(aTab, this.verticalPinnedTabsContainer.lastChild)
         );
-      } else {
+      } else if (!handled) {
         this.moveTabTo(aTab, {
           tabIndex: this.pinnedTabCount,
           forceUngrouped: true,
@@ -857,12 +907,15 @@
       }
 
       if (this.tabContainer.verticalMode) {
+        const handled = gZenFolders.handleTabUnpin(aTab);
         this.#handleTabMove(aTab, () => {
           // we remove this attribute first, so that allTabs represents
           // the moving of a tab from the vertical pinned tabs container
           // and back into arrowscrollbox.
           aTab.removeAttribute("pinned");
-          this.tabContainer.arrowScrollbox.prepend(aTab);
+          if (!handled) {
+            ZenWorkspaces.activeWorkspaceStrip.prepend(aTab);
+          }
         });
       } else {
         this.moveTabTo(aTab, {
@@ -1046,6 +1099,8 @@
 
       let LOCAL_PROTOCOLS = ["chrome:", "about:", "resource:", "data:"];
 
+      try {
+      gZenPinnedTabManager.onTabIconChanged(aTab, aIconURL);
       if (
         aIconURL &&
         !aLoadingPrincipal &&
@@ -1056,6 +1111,9 @@
         );
         return;
       }
+      } catch (e) {
+        console.warn(e);
+      }
 
       let browser = this.getBrowserForTab(aTab);
       browser.mIconURL = aIconURL;
@@ -1305,6 +1363,7 @@
       if (!this._previewMode) {
         newTab.recordTimeFromUnloadToReload();
         newTab.updateLastAccessed();
+        newTab.removeAttribute("unread");
         oldTab.updateLastAccessed();
         // if this is the foreground window, update the last-seen timestamps.
         if (this.ownerGlobal == BrowserWindowTracker.getTopWindow()) {
@@ -1457,6 +1516,9 @@
       }
 
       let activeEl = document.activeElement;
+      if (gURLBar._zenHandleUrlbarClose) {
+        gURLBar._zenHandleUrlbarClose(true);
+      }
       // If focus is on the old tab, move it to the new tab.
       if (activeEl == oldTab) {
         newTab.focus();
@@ -1780,7 +1842,8 @@
     }
 
     _setTabLabel(aTab, aLabel, { beforeTabOpen, isContentTitle, isURL } = {}) {
-      if (!aLabel || aLabel.includes("about:reader?")) {
+      gZenPinnedTabManager.onTabLabelChanged(aTab);
+      if (!aLabel || aLabel.includes("about:reader?") || aTab.hasAttribute("zen-has-static-label")) {
         return false;
       }
 
@@ -1888,7 +1951,7 @@
         newIndex = this.selectedTab._tPos + 1;
       }
 
-      if (replace) {
+      if (replace && !(!targetTab && this.selectedTab?.hasAttribute('zen-empty-tab'))) {
         if (this.isTabGroupLabel(targetTab)) {
           throw new Error(
             "Replacing a tab group label with a tab is not supported"
@@ -2152,6 +2215,7 @@
       uriIsAboutBlank,
       userContextId,
       skipLoad,
+      _forZenEmptyTab,
     } = {}) {
       let b = document.createXULElement("browser");
       // Use the JSM global to create the permanentKey, so that if the
@@ -2225,8 +2289,7 @@
         // we use a different attribute name for this?
         b.setAttribute("name", name);
       }
-
-      if (this._allowTransparentBrowser) {
+      if (this._allowTransparentBrowser || _forZenEmptyTab) {
         b.setAttribute("transparent", "true");
       }
 
@@ -2391,7 +2454,7 @@
 
       let panel = this.getPanel(browser);
       let uniqueId = this._generateUniquePanelID();
-      panel.id = uniqueId;
+      if (!panel.id?.startsWith("zen-")) panel.id = uniqueId;
       aTab.linkedPanel = uniqueId;
 
       // Inject the <browser> into the DOM if necessary.
@@ -2450,8 +2513,8 @@
       // If we transitioned from one browser to two browsers, we need to set
       // hasSiblings=false on both the existing browser and the new browser.
       if (this.tabs.length == 2) {
-        this.tabs[0].linkedBrowser.browsingContext.hasSiblings = true;
-        this.tabs[1].linkedBrowser.browsingContext.hasSiblings = true;
+        if (this.tabs[0].linkedBrowser.browsingContext) this.tabs[0].linkedBrowser.browsingContext.hasSiblings = true;
+        if (this.tabs[1].linkedBrowser.browsingContext) this.tabs[1].linkedBrowser.browsingContext.hasSiblings = true;
       } else {
         aTab.linkedBrowser.browsingContext.hasSiblings = this.tabs.length > 1;
       }
@@ -2679,6 +2742,7 @@
         schemelessInput,
         hasValidUserGestureActivation = false,
         textDirectiveUserActivation = false,
+        _forZenEmptyTab,
       } = {}
     ) {
       // all callers of addTab that pass a params object need to pass
@@ -2689,6 +2753,12 @@
         );
       }
 
+      let hasZenDefaultUserContextId = false;
+      let zenForcedWorkspaceId = undefined;
+      if (typeof ZenWorkspaces !== "undefined" && !_forZenEmptyTab) {
+        [userContextId, hasZenDefaultUserContextId, zenForcedWorkspaceId] = ZenWorkspaces.getContextIdIfNeeded(userContextId, fromExternal, allowInheritPrincipal);
+      }
+
       if (!UserInteraction.running("browser.tabs.opening", window)) {
         UserInteraction.start("browser.tabs.opening", "initting", window);
       }
@@ -2752,6 +2822,16 @@
           noInitialLabel,
           skipBackgroundNotify,
         });
+        if (hasZenDefaultUserContextId) {
+          t.setAttribute("zenDefaultUserContextId", "true");
+        }
+        if (zenForcedWorkspaceId !== undefined) {
+          t.setAttribute("zen-workspace-id", zenForcedWorkspaceId);
+          t.setAttribute("change-workspace", "")
+        }
+        if (_forZenEmptyTab) {
+          t.setAttribute("zen-empty-tab", "true");
+        }
         if (insertTab) {
           if (typeof index == "number") {
             elementIndex = this.#tabIndexToElementIndex(index);
@@ -2779,6 +2859,7 @@
           openWindowInfo,
           skipLoad,
           triggeringRemoteType,
+          _forZenEmptyTab,
         }));
 
         if (focusUrlBar) {
@@ -2898,6 +2979,9 @@
         }
       }
 
+      if (typeof window.gZenVerticalTabsManager !== "undefined") {
+        gZenVerticalTabsManager.animateTab(t);
+      }
       // Additionally send pinned tab events
       if (pinned) {
         this._notifyPinnedStatus(t);
@@ -2945,12 +3029,15 @@
      * @param {string} [label=]
      * @returns {MozTabbrowserTabGroup}
      */
-    _createTabGroup(id, color, collapsed, label = "") {
+    _createTabGroup(id, color, collapsed, label = "", pinned = false, essential = false, splitViewGroup = false) {
       let group = document.createXULElement("tab-group", { is: "tab-group" });
       group.id = id;
       group.collapsed = collapsed;
       group.color = color;
       group.label = label;
+      group.pinned = pinned;
+      group.essential = essential;
+      if (splitViewGroup) group.setAttribute('split-view-group', true);
       return group;
     }
 
@@ -2993,6 +3080,7 @@
         insertBefore = null,
         isUserTriggered = false,
         telemetryUserCreateSource = "unknown",
+        forSplitView = false,
       } = {}
     ) {
       if (!tabs?.length) {
@@ -3011,7 +3099,12 @@
         id = `${Date.now()}-${Math.round(Math.random() * 100)}`;
       }
       let group = this._createTabGroup(id, color, false, label);
-      this.tabContainer.insertBefore(
+      if (forSplitView) {
+        group.setAttribute('split-view-group', true);
+      }
+      group.essential = tabs.some(tab => tab.hasAttribute("essential"));
+      group.pinned = group.essential || tabs.some(tab => tab.pinned);
+      ((insertBefore?.group ?? insertBefore).parentNode).insertBefore(
         group,
         insertBefore?.group ?? insertBefore
       );
@@ -3342,6 +3435,7 @@
         openWindowInfo,
         skipLoad,
         triggeringRemoteType,
+        _forZenEmptyTab
       }
     ) {
       // If we don't have a preferred remote type (or it is `NOT_REMOTE`), and
@@ -3411,6 +3505,7 @@
           openWindowInfo,
           name,
           skipLoad,
+          _forZenEmptyTab
         });
       }
 
@@ -3589,6 +3684,27 @@
         ) {
           tabWasReused = true;
           tab = this.selectedTab;
+          if (tabData.zenWorkspace) {
+            tab.setAttribute("zen-workspace-id", tabData.zenWorkspace);
+          }
+          if (tabData.zenIsEmpty) {
+            tab.setAttribute("zen-empty-tab", "true");
+          }
+          if (tabData.zenHasStaticLabel) {
+            tab.setAttribute("zen-has-static-label", "true");
+          }
+          if (tabData.zenPinnedId) {
+            tab.setAttribute("zen-pin-id", tabData.zenPinnedId);
+          }
+          if (tabData.zenEssential) {
+            tab.setAttribute("zen-essential", "true");
+          }
+          if (tabData.zenDefaultUserContextId) {
+            tab.setAttribute("zenDefaultUserContextId", "true");
+          }
+          if (tabData.zenPinnedEntry) {
+            tab.setAttribute("zen-pinned-entry", tabData.zenPinnedEntry);
+          }
           if (!tabData.pinned) {
             this.unpinTab(tab);
           } else {
@@ -3637,7 +3753,27 @@
             skipLoad: true,
             preferredRemoteType,
           });
-
+          if (tabData.zenWorkspace) {
+            tab.setAttribute("zen-workspace-id", tabData.zenWorkspace);
+          }
+          if (tabData.zenPinnedId) {
+            tab.setAttribute("zen-pin-id", tabData.zenPinnedId);
+          }
+          if (tabData.zenIsEmpty) {
+            tab.setAttribute("zen-empty-tab", "true");
+          }
+          if (tabData.zenHasStaticLabel) {
+            tab.setAttribute("zen-has-static-label", "true");
+          }
+          if (tabData.zenEssential) {
+            tab.setAttribute("zen-essential", "true");
+          }
+          if (tabData.zenDefaultUserContextId) {
+            tab.setAttribute("zenDefaultUserContextId", "true");
+          }
+          if (tabData.zenPinnedEntry) {
+            tab.setAttribute("zen-pinned-entry", tabData.zenPinnedEntry);
+          }
           if (select) {
             tabToSelect = tab;
           }
@@ -3661,7 +3797,8 @@
             // needs calling:
             shouldUpdateForPinnedTabs = true;
           }
-        } else if (tabData.groupId) {
+        }
+        if (tabData.groupId) {
           let { groupId } = tabData;
           const tabGroup = tabGroupWorkingData.get(groupId);
           // if a tab refers to a tab group we don't know, skip any group
@@ -3675,7 +3812,10 @@
                 tabGroup.stateData.id,
                 tabGroup.stateData.color,
                 tabGroup.stateData.collapsed,
-                tabGroup.stateData.name
+                tabGroup.stateData.name,
+                tabGroup.stateData.pinned,
+                tabGroup.stateData.essential,
+                tabGroup.stateData.splitView,
               );
               tabsFragment.appendChild(tabGroup.node);
             }
@@ -3723,8 +3863,15 @@
       // to remove the old selected tab.
       if (tabToSelect) {
         let leftoverTab = this.selectedTab;
+        if (tabToSelect.pinned) {
+        ZenWorkspaces._tabToRemoveForEmpty = leftoverTab;
+        } else {
         this.selectedTab = tabToSelect;
         this.removeTab(leftoverTab);
+        }
+      }
+      else {
+        this.selectedTab._possiblyEmpty = this.selectedTab.isEmpty; // Not needed, but just in case.
       }
 
       if (tabs.length > 1 || !tabs[0].selected) {
@@ -3912,7 +4059,7 @@
       // Ensure we have an index if one was not provided.
       if (typeof index != "number") {
         // Move the new tab after another tab if needed, to the end otherwise.
-        index = Infinity;
+        index = Services.prefs.getBoolPref("zen.view.show-newtab-button-top") ? this.pinnedTabCount : Infinity;
         if (
           !bulkOrderedOpen &&
           ((openerTab &&
@@ -3958,18 +4105,18 @@
 
       // Ensure index is within bounds.
       if (tab.pinned) {
-        index = Math.max(index, 0);
-        index = Math.min(index, this.pinnedTabCount);
+        index = Math.max(index, tab.hasAttribute("zen-essential") ? 0 : this._numZenEssentials);
+        index = Math.min(index, tab.hasAttribute("zen-essential") ? this._numZenEssentials : this.pinnedTabCount);
       } else {
         index = Math.max(index, this.pinnedTabCount);
         index = Math.min(index, this.tabContainer.ariaFocusableItems.length);
       }
 
       /** @type {MozTabbrowserTab|undefined} */
-      let itemAfter = this.tabContainer.ariaFocusableItems.at(index);
+      let itemAfter = this.tabContainer.ariaFocusableItems.filter(tab => !tab.hasAttribute("zen-glance-tab")).at(index);
       this.tabContainer._invalidateCachedTabs();
 
-      if (tabGroup) {
+      if (tabGroup && !tabGroup.hasAttribute("split-view-group")) {
         if (this.isTab(itemAfter) && itemAfter.group == tabGroup) {
           // Place at the front of, or between tabs in, the same tab group
           this.tabContainer.insertBefore(tab, itemAfter);
@@ -4290,6 +4437,9 @@
         return;
       }
 
+      for (let tab of selectedTabs) {
+        gZenPinnedTabManager._removePinnedAttributes(tab, true);
+      }
       this.removeTabs(selectedTabs, { telemetrySource });
     }
 
@@ -4542,6 +4692,7 @@
         telemetrySource,
       } = {}
     ) {
+      tabs = tabs.filter(tab => !tab.hasAttribute("zen-empty-tab"));
       // When 'closeWindowWithLastTab' pref is enabled, closing all tabs
       // can be considered equivalent to closing the window.
       if (
@@ -4626,6 +4777,7 @@
         if (lastToClose) {
           this.removeTab(lastToClose, aParams);
         }
+        gZenUIManager.onTabClose(undefined);
       } catch (e) {
         console.error(e);
       }
@@ -4650,6 +4802,7 @@
         telemetrySource,
       } = {}
     ) {
+      gZenUIManager.saveScrollbarState();
       if (UserInteraction.running("browser.tabs.opening", window)) {
         UserInteraction.finish("browser.tabs.opening", window);
       }
@@ -4663,6 +4816,12 @@
         aTab._closeTimeNoAnimTimerId = Glean.browserTabclose.timeNoAnim.start();
       }
 
+      if (ZenWorkspaces.workspaceEnabled) {
+        let newTab = ZenWorkspaces.handleTabBeforeClose(aTab);
+        if (newTab) {
+          this.selectedTab = newTab;
+        }
+      }
       // Handle requests for synchronously removing an already
       // asynchronously closing tab.
       if (!animate && aTab.closing) {
@@ -4677,7 +4836,9 @@
       // frame created for it (for example, by updating the visually selected
       // state).
       let tabWidth = window.windowUtils.getBoundsWithoutFlushing(aTab).width;
-
+      if (gZenGlanceManager.manageTabClose(aTab)) {
+        return;
+      }
       if (
         !this._beginRemoveTab(aTab, {
           closeWindowFastpath: true,
@@ -4840,7 +5001,7 @@
           closeWindowWithLastTab != null
             ? closeWindowWithLastTab
             : !window.toolbar.visible ||
-              Services.prefs.getBoolPref("browser.tabs.closeWindowWithLastTab");
+            Services.prefs.getBoolPref("browser.tabs.closeWindowWithLastTab") && !ZenWorkspaces._isClosingWindow && !ZenWorkspaces._removedByStartupPage;
 
         if (closeWindow) {
           // We've already called beforeunload on all the relevant tabs if we get here,
@@ -4864,6 +5025,7 @@
 
         newTab = true;
       }
+      ZenWorkspaces._removedByStartupPage = false;
       aTab._endRemoveArgs = [closeWindow, newTab];
 
       // swapBrowsersAndCloseOther will take care of closing the window without animation.
@@ -4903,9 +5065,7 @@
       aTab._mouseleave();
 
       if (newTab) {
-        this.addTrustedTab(BROWSER_NEW_TAB_URL, {
-          skipAnimation: true,
-        });
+        ZenWorkspaces.selectEmptyTab(BROWSER_NEW_TAB_URL);
       } else {
         TabBarVisibility.update();
       }
@@ -5034,6 +5194,8 @@
         this.tabs[i]._tPos = i;
       }
 
+      ZenWorkspaces.updateTabsContainers();
+
       if (!this._windowIsClosing) {
         if (wasPinned) {
           this.tabContainer._positionPinnedTabs();
@@ -5159,8 +5321,8 @@
       return closedCount;
     }
 
-    async explicitUnloadTabs(tabs) {
-      let unloadBlocked = await this.runBeforeUnloadForTabs(tabs);
+    async explicitUnloadTabs(tabs, skipPermitUnload = false) {
+      let unloadBlocked = skipPermitUnload ? false : await this.runBeforeUnloadForTabs(tabs);
       if (unloadBlocked) {
         return;
       }
@@ -5248,6 +5410,7 @@
       }
 
       let excludeTabs = new Set(aExcludeTabs);
+      ZenWorkspaces.getTabsToExclude(aTab).forEach(tab => excludeTabs.add(tab));
 
       // If this tab has a successor, it should be selectable, since
       // hiding or closing a tab removes that tab as a successor.
@@ -5260,13 +5423,13 @@
         !excludeTabs.has(aTab.owner) &&
         Services.prefs.getBoolPref("browser.tabs.selectOwnerOnClose")
       ) {
-        return aTab.owner;
+        return ZenWorkspaces.findTabToBlur(aTab.owner);
       }
 
       // Try to find a remaining tab that comes after the given tab
       let remainingTabs = Array.prototype.filter.call(
         this.visibleTabs,
-        tab => !excludeTabs.has(tab)
+        tab => !excludeTabs.has(tab) && ZenWorkspaces._shouldChangeToTab(tab)
       );
 
       let tab = this.tabContainer.findNextTab(aTab, {
@@ -5282,7 +5445,7 @@
       }
 
       if (tab) {
-        return tab;
+        return ZenWorkspaces.findTabToBlur(tab);
       }
 
       // If no qualifying visible tab was found, see if there is a tab in
@@ -5303,7 +5466,7 @@
         });
       }
 
-      return tab;
+      return ZenWorkspaces.findTabToBlur(tab);
     }
 
     _blurTab(aTab) {
@@ -5704,10 +5867,10 @@
       SessionStore.deleteCustomTabValue(aTab, "hiddenBy");
     }
 
-    hideTab(aTab, aSource) {
+    hideTab(aTab, aSource, forZenWorkspaces = false) {
       if (
         aTab.hidden ||
-        aTab.pinned ||
+        (aTab.pinned && !forZenWorkspaces) ||
         aTab.selected ||
         aTab.closing ||
         // Tabs that are sharing the screen, microphone or camera cannot be hidden.
@@ -6001,7 +6164,7 @@
 
       // Don't allow mixing pinned and unpinned tabs.
       if (this.isTab(element) && element.pinned) {
-        tabIndex = Math.min(tabIndex, this.pinnedTabCount - 1);
+        tabIndex = element.hasAttribute('zen-essential') ? Math.min(tabIndex, this._numZenEssentials - 1) : Math.min(tabIndex, this.pinnedTabCount - 1);
       } else {
         tabIndex = Math.max(tabIndex, this.pinnedTabCount);
       }
@@ -6028,9 +6191,16 @@
         element,
         () => {
           let neighbor = this.tabs[tabIndex];
-          if (forceUngrouped && neighbor.group) {
+          const _tPos = element._tPos;
+          if ((forceUngrouped && neighbor?.group) || neighbor?.group?.hasAttribute("split-view-group")) {
             neighbor = neighbor.group;
           }
+          if (element.group?.hasAttribute("split-view-group")) {
+            element = element.group;
+          }
+          if (element.group?.hasAttribute("split-view-group") && neighbor == element.group) {
+            return;
+          }
           if (neighbor && this.isTab(element) && tabIndex > element._tPos) {
             neighbor.after(element);
           } else {
@@ -6099,7 +6269,9 @@
           targetElement = targetElement.group;
         }
       }
-
+      if (element.group?.hasAttribute("split-view-group")) {
+        element = element.group;
+      }
       // Don't allow mixing pinned and unpinned tabs.
       if (element.pinned && !targetElement?.pinned) {
         targetElement = this.tabs[this.pinnedTabCount - 1];
@@ -6109,7 +6281,13 @@
         moveBefore = true;
       }
 
+      if (targetElement?.group?.hasAttribute("split-view-group")) {
+        targetElement = targetElement.group;
+      }
       let getContainer = () => {
+        if (element.hasAttribute("zen-essential")) {
+          return ZenWorkspaces.getEssentialsSection(element);
+        }
         if (element.pinned && this.tabContainer.verticalMode) {
           return this.tabContainer.verticalPinnedTabsContainer;
         }
@@ -6169,7 +6347,7 @@
       if (!this.isTab(aTab)) {
         throw new Error("Can only move a tab into a tab group");
       }
-      if (aTab.pinned) {
+      if (aTab.pinned != !!aGroup.pinned) {
         return;
       }
       if (aTab.group && aTab.group.id === aGroup.id) {
@@ -6263,6 +6441,10 @@
 
       moveActionCallback();
 
+      ZenWorkspaces._makeSureEmptyTabIsLast();
+      gZenViewSplitter._maybeRemoveFakeBrowser(false);
+      gZenViewSplitter._canDrop = false;
+
       // Clear tabs cache after moving nodes because the order of tabs may have
       // changed.
       this.tabContainer._invalidateCachedTabs();
@@ -7080,7 +7262,7 @@
             // preventDefault(). It will still raise the window if appropriate.
             break;
           }
-          this.selectedTab = tab;
+          ZenWorkspaces.switchTabIfNeeded(tab);
           window.focus();
           aEvent.preventDefault();
           break;
@@ -7981,6 +8163,7 @@
             aWebProgress.isTopLevel
           ) {
             this.mTab.setAttribute("busy", "true");
+            if (!this.mTab.selected) this.mTab.setAttribute("unread", "true");
             gBrowser._tabAttrModified(this.mTab, ["busy"]);
             this.mTab._notselectedsinceload = !this.mTab.selected;
           }
@@ -8954,7 +9137,7 @@ var TabContextMenu = {
     );
     contextUnpinSelectedTabs.hidden =
       !this.contextTab.pinned || !this.multiselected;
-
+    gZenPinnedTabManager.updatePinnedTabContextMenu(this.contextTab);
     // Move Tab items
     let contextMoveTabOptions = document.getElementById(
       "context_moveTabOptions"
@@ -9223,6 +9406,7 @@ var TabContextMenu = {
         telemetrySource: gBrowser.TabMetrics.METRIC_SOURCE.TAB_STRIP,
       });
     } else {
+      gZenPinnedTabManager._removePinnedAttributes(this.contextTab, true);
       gBrowser.removeTab(this.contextTab, {
         animate: true,
         telemetrySource: gBrowser.TabMetrics.METRIC_SOURCE.TAB_STRIP,
