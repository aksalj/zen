diff --git a/browser/components/tabbrowser/content/tabs.js b/browser/components/tabbrowser/content/tabs.js
index e47f735e4e4563c9b7537944628418d1478c068d..b6d52ef3179d66ecd7f06fd61a6bca6d075b9cf7 100644
--- a/browser/components/tabbrowser/content/tabs.js
+++ b/browser/components/tabbrowser/content/tabs.js
@@ -332,7 +332,7 @@
       // and we're not hitting the scroll buttons.
       if (
         event.button != 0 ||
-        event.target != this.arrowScrollbox ||
+        !event.target.classList.contains("zen-workspace-normal-tabs-section") ||
         event.composedTarget.localName == "toolbarbutton"
       ) {
         return;
@@ -413,7 +413,6 @@
             });
           }
         } else if (isTabGroupLabel(event.target)) {
-          event.target.group.saveAndClose();
         } else if (
           event.originalTarget.closest("scrollbox") &&
           !Services.prefs.getBoolPref(
@@ -686,7 +685,7 @@
       if (this.#isContainerVerticalPinnedGrid(tab)) {
         // In expanded vertical mode, the max number of pinned tabs per row is dynamic
         // Set this before adjusting dragged tab's position
-        let pinnedTabs = this.visibleTabs.slice(0, gBrowser.pinnedTabCount);
+        let pinnedTabs = this.ariaFocusableItems.slice(0, gBrowser._numZenEssentials);
         let tabsPerRow = 0;
         let position = RTL_UI
           ? window.windowUtils.getBoundsWithoutFlushing(
@@ -772,9 +771,10 @@
 
         if (tab.multiselected) {
           this.#moveTogetherSelectedTabs(tab);
-        } else if (isTabGroupLabel(tab) && !tab.group.collapsed) {
-          tab.group.collapsed = true;
+        } else if (isTabGroupLabel(tab) && (!tab.group.collapsed || tab.group.hasAttribute("has-active"))) {
+          tab.group.collapsed = !tab.group.hasAttribute("split-view-group");
           expandGroupOnDrop = true;
+          gZenFolders.collapseVisibleTab(tab.group);
         }
       }
 
@@ -872,7 +872,7 @@
           ? event.screenY - window.screenY - tabOffset
           : event.screenY - window.screenY,
         scrollPos:
-          this.verticalMode && tab.pinned
+          this.verticalMode && tab.pinned && false
             ? this.pinnedTabsContainer.scrollPosition
             : this.arrowScrollbox.scrollPosition,
         screenX: event.screenX,
@@ -933,6 +933,10 @@
       }
 
       let draggedTab = event.dataTransfer.mozGetDataAt(TAB_DROP_TYPE, 0);
+      if (draggedTab && dropEffect === "move") {
+        gZenPinnedTabManager.applyDragoverClass(event, draggedTab);
+        gZenViewSplitter.onBrowserDragEndToSplit(event);
+      }
       if (
         (dropEffect == "move" || dropEffect == "copy") &&
         document == draggedTab.ownerDocument &&
@@ -1060,7 +1064,9 @@
         isTabGroupLabel(draggedTab) &&
         draggedTab._dragData?.expandGroupOnDrop
       ) {
-        draggedTab.group.collapsed = false;
+        const isActive = draggedTab.group.hasAttribute("has-active");
+        draggedTab.group.collapsed = isActive;
+        if (isActive) gZenFolders.expandVisibleTab(draggedTab.group);
       }
     }
 
@@ -1096,6 +1102,18 @@
 
       this._tabDropIndicator.hidden = true;
       event.stopPropagation();
+      if (draggedTab?.hasAttribute("zen-has-splitted")) {
+        draggedTab.removeAttribute("zen-has-splitted");
+        draggedTab._visuallySelected = false;
+      }
+      if (draggedTab && dropEffect == "move") {
+        let moved = gZenPinnedTabManager.moveToAnotherTabContainerIfNecessary(event, movingTabs);
+
+        if (moved) {
+          this.finishMoveTogetherSelectedTabs(draggedTab);
+          return;
+        }
+      }
       if (draggedTab && dropEffect == "copy") {
         let duplicatedDraggedTab;
         let duplicatedTabs = [];
@@ -1120,8 +1138,9 @@
         let translateOffsetY = oldTranslateY % tabHeight;
         let newTranslateX = oldTranslateX - translateOffsetX;
         let newTranslateY = oldTranslateY - translateOffsetY;
-        let isPinned = draggedTab.pinned;
-        let numPinned = gBrowser.pinnedTabCount;
+        let isPinned = draggedTab?.group ? draggedTab.group.pinned : draggedTab.pinned;
+        let numPinned = gBrowser._numVisiblePinTabsWithoutCollapsed;
+        let essential = draggedTab.hasAttribute("zen-essential");
 
         if (this.#isContainerVerticalPinnedGrid(draggedTab)) {
           // Update both translate axis for pinned vertical expanded tabs
@@ -1137,8 +1156,8 @@
           }
         } else {
           let tabs = this.ariaFocusableItems.slice(
-            isPinned ? 0 : numPinned,
-            isPinned ? numPinned : undefined
+            isPinned ? (essential ? 0 : gBrowser._numZenEssentials) : numPinned,
+            isPinned ? (essential ? gBrowser._numZenEssentials : numPinned) : undefined
           );
           let size = this.verticalMode ? "height" : "width";
           let screenAxis = this.verticalMode ? "screenY" : "screenX";
@@ -1179,11 +1198,9 @@
         }
 
         let shouldPin =
-          numPinned &&
-          this.pinnedTabsContainer.contains(event.target) &&
-          !draggedTab.pinned;
+          false;
         let shouldUnpin =
-          this.arrowScrollbox.contains(event.target) && draggedTab.pinned;
+          false;
         let shouldTranslate =
           !gReduceMotion &&
           !shouldCreateGroupOnDrop &&
@@ -1196,6 +1213,7 @@
             (oldTranslateY && oldTranslateY != newTranslateY);
         } else if (this.verticalMode) {
           shouldTranslate &&= oldTranslateY && oldTranslateY != newTranslateY;
+          shouldTranslate = false;
         } else {
           shouldTranslate &&= oldTranslateX && oldTranslateX != newTranslateX;
         }
@@ -1379,6 +1397,7 @@
 
           let nextItem = this.ariaFocusableItems[newIndex];
           let tabGroup = isTab(nextItem) && nextItem.group;
+          if (gZenViewSplitter.handleTabDrop(event, urls, replace, inBackground)) return;
           gBrowser.loadTabs(urls, {
             inBackground,
             replace,
@@ -1411,6 +1430,17 @@
 
       this.finishMoveTogetherSelectedTabs(draggedTab);
       this.finishAnimateTabMove();
+
+      if (!dt.mozUserCancelled && dt.dropEffect == "none" && !this._isCustomizing) {
+        const moved = gZenViewSplitter.moveTabToSplitView(event, draggedTab);
+        if (moved) {
+          delete draggedTab._dragData;
+          return;
+        }
+      } else if (dt.mozUserCancelled) {
+        if (gZenViewSplitter._lastOpenedTab) gZenViewSplitter._lastOpenedTab._visuallySelected = false;
+      }
+
       this.#keepTabSizeLocked = false;
       this._unlockTabSizing();
       this.#expandGroupOnDrop(draggedTab);
@@ -1582,7 +1612,6 @@
 
       this.toggleAttribute("overflow", true);
       this._updateCloseButtons();
-      this._handleTabSelect(true);
 
       document
         .getElementById("tab-preview-panel")
@@ -1640,7 +1669,7 @@
     }
 
     get newTabButton() {
-      return this.querySelector("#tabs-newtab-button");
+      return gZenWorkspaces.activeWorkspaceStrip.querySelector("#tabs-newtab-button");
     }
 
     get verticalMode() {
@@ -1656,6 +1685,7 @@
     }
 
     get overflowing() {
+      gZenWorkspaces.updateOverflowingTabs();
       return this.hasAttribute("overflow");
     }
 
@@ -1664,26 +1694,54 @@
       if (this.#allTabs) {
         return this.#allTabs;
       }
-      let children = Array.from(this.arrowScrollbox.children);
+      let children = gZenWorkspaces.tabboxChildren;
       // remove arrowScrollbox periphery element
       children.pop();
 
       // explode tab groups
       // Iterate backwards over the array to preserve indices while we modify
       // things in place
-      for (let i = children.length - 1; i >= 0; i--) {
-        if (children[i].tagName == "tab-group") {
-          children.splice(i, 1, ...children[i].tabs);
+      const pinnedTabs = [...gZenWorkspaces.getCurrentEssentialsContainer().children, ...this.pinnedTabsContainer.children];
+      const expandTabs = (tabs) => {
+        for (let i = tabs.length - 1; i >= 0; i--) {
+          const tab = tabs[i];
+          if (isTabGroup(tab)) {
+            // remove the group from the list
+            tabs.splice(i, 1);
+            // add the tabs in the group to the list
+            tabs.splice(i, 0, ...tab.tabs);
+          }
         }
       }
-
-      this.#allTabs = [...this.pinnedTabsContainer.children, ...children];
+      expandTabs(pinnedTabs);
+      expandTabs(children);
+      const allTabs = [
+        ...pinnedTabs,
+        ...children,
+      ];
+      const lastPinnedTabIdx = pinnedTabs.length - 1;
+      let i = 0;
+      for (const tab of [...allTabs]) {
+        // add glance tabs (tabs inside tabs) to the list
+        const glanceTab = tab.glanceTab;
+        if (glanceTab) {
+          // insert right after the parent tab. note: it must be inserted before
+          // the last pinned tab so it can be inserted in the correct order
+          allTabs.splice(Math.max(i++ + 1, lastPinnedTabIdx), 0, glanceTab);
+        } else if (tab.classList.contains("pinned-tabs-container-separator")) {
+          // remove the separator from the list
+          allTabs.splice(i, 1);
+          i--;
+        }
+        i++;
+      }
+      this.#allTabs = allTabs;
       return this.#allTabs;
     }
 
     get allGroups() {
       let children = Array.from(this.arrowScrollbox.children);
-      return children.filter(node => node.tagName == "tab-group");
+      return gZenWorkspaces.allTabGroups;
     }
 
     /**
@@ -1750,32 +1808,27 @@
 
       let elementIndex = 0;
 
-      for (let i = 0; i < this.pinnedTabsContainer.childElementCount; i++) {
-        this.pinnedTabsContainer.children[i].elementIndex = elementIndex++;
-      }
-      let children = Array.from(this.arrowScrollbox.children);
+      let children = gZenWorkspaces.tabboxChildrenWithoutEmpty;
 
       let focusableItems = [];
-      for (let child of children) {
+      for (let child of [...gZenWorkspaces.getCurrentEssentialsContainer().children, ...this.pinnedTabsContainer.children, ...children]) {
         if (isTab(child) && child.visible) {
           child.elementIndex = elementIndex++;
           focusableItems.push(child);
         } else if (isTabGroup(child)) {
           child.labelElement.elementIndex = elementIndex++;
           focusableItems.push(child.labelElement);
-
-          let visibleTabsInGroup = child.tabs.filter(tab => tab.visible);
-          visibleTabsInGroup.forEach(tab => {
-            tab.elementIndex = elementIndex++;
-          });
+          if (!child.hasAttribute("split-view-group")) {
+            let visibleTabsInGroup = child.childGroupsAndTabs.filter(tab => tab.visible);
+            visibleTabsInGroup.forEach(tab => {
+              tab.elementIndex = elementIndex++;
+            });
           focusableItems.push(...visibleTabsInGroup);
+          }
         }
       }
 
-      this.#focusableItems = [
-        ...this.pinnedTabsContainer.children,
-        ...focusableItems,
-      ];
+      this.#focusableItems = focusableItems;
 
       return this.#focusableItems;
     }
@@ -1783,6 +1836,7 @@
     _invalidateCachedTabs() {
       this.#allTabs = null;
       this._invalidateCachedVisibleTabs();
+      gZenWorkspaces._allStoredTabs = null;
     }
 
     _invalidateCachedVisibleTabs() {
@@ -1798,8 +1852,8 @@
     #isContainerVerticalPinnedGrid(tab) {
       return (
         this.verticalMode &&
-        tab.hasAttribute("pinned") &&
-        this.hasAttribute("expanded") &&
+        (tab.hasAttribute("zen-essential")) &&
+        (this.hasAttribute("expanded") || document.documentElement.hasAttribute("zen-sidebar-expanded")) &&
         !this.expandOnHover
       );
     }
@@ -1815,7 +1869,7 @@
 
       if (node == null) {
         // We have a container for non-tab elements at the end of the scrollbox.
-        node = this.arrowScrollbox.lastChild;
+        node = gZenWorkspaces.activeWorkspaceStrip.lastChild;
       }
 
       node.before(tab);
@@ -1910,7 +1964,7 @@
           // There are separate "new tab" buttons for horizontal tabs toolbar, vertical tabs and
           // for when the tab strip is overflowed (which is shared by vertical and horizontal tabs);
           // Attach the long click popup to all of them.
-          const newTab = document.getElementById("new-tab-button");
+          const newTab = gZenWorkspaces.activeWorkspaceStrip.querySelector("#tabs-newtab-button");
           const newTab2 = this.newTabButton;
           const newTabVertical = document.getElementById(
             "vertical-tabs-newtab-button"
@@ -2005,10 +2059,12 @@
 
     _handleTabSelect(aInstant) {
       let selectedTab = this.selectedItem;
+      if (!selectedTab) return;
       if (this.overflowing) {
         this.arrowScrollbox.ensureElementIsVisible(selectedTab, aInstant);
       }
 
+      gZenCompactModeManager.flashSidebarIfNecessary(aInstant);
       selectedTab._notselectedsinceload = false;
     }
 
@@ -2152,6 +2208,16 @@
       when the tab is first selected to be dragged.
     */
     #updateTabStylesOnDrag(tab) {
+      let { movingTabs: zenMovingTabs } = tab._dragData;
+      for (let movingTab of zenMovingTabs.slice(zenMovingTabs.findIndex(t => t._tPos == tab._tPos))) {
+        if (isTabGroupLabel(tab)) {
+          movingTab = movingTab.parentElement;
+        }
+        // "dragtarget" contains the following rules which must only be set AFTER the above
+        // elements have been adjusted. {z-index: 3 !important, position: absolute !important}
+        movingTab.setAttribute("zen-dragtarget", "");
+      }
+      return;
       let isPinned = tab.pinned;
       let numPinned = gBrowser.pinnedTabCount;
       let allTabs = this.ariaFocusableItems;
@@ -2385,7 +2451,7 @@
         return;
       }
 
-      let tabs = this.visibleTabs.slice(0, gBrowser.pinnedTabCount);
+      let tabs = this.ariaFocusableItems.slice(0, gBrowser._numZenEssentials);
 
       let directionX = screenX > dragData.animLastScreenX;
       let directionY = screenY > dragData.animLastScreenY;
@@ -2394,6 +2460,8 @@
 
       let { width: tabWidth, height: tabHeight } =
         draggedTab.getBoundingClientRect();
+      tabWidth += 4; // Add 4px to account for the gap
+      tabHeight += 4;
       let shiftSizeX = tabWidth * movingTabs.length;
       let shiftSizeY = tabHeight;
       dragData.tabWidth = tabWidth;
@@ -2430,8 +2498,8 @@
       let lastBoundX =
         lastTabInRow.screenX +
         lastTabInRow.getBoundingClientRect().width -
-        (lastMovingTabScreenX + tabWidth);
-      let lastBoundY = periphery.screenY - (lastMovingTabScreenY + tabHeight);
+        (lastMovingTabScreenX + tabWidth) + 4;
+      let lastBoundY = 0;
       translateX = Math.min(Math.max(translateX, firstBoundX), lastBoundX);
       translateY = Math.min(Math.max(translateY, firstBoundY), lastBoundY);
 
@@ -2547,7 +2615,7 @@
       }
 
       dragData.animDropElementIndex = newIndex;
-      dragData.dropElement = tabs[newIndex];
+      dragData.dropElement = tabs[Math.min(newIndex, tabs.length - 1)];
       dragData.dropBefore = newIndex < tabs.length;
 
       // Shift background tabs to leave a gap where the dragged tab
@@ -2580,13 +2648,18 @@
 
       this.#clearDragOverCreateGroupTimer();
 
-      let isPinned = draggedTab.pinned;
-      let numPinned = gBrowser.pinnedTabCount;
+      let isPinned = draggedTab?.group ? draggedTab.group.pinned : draggedTab.pinned;
+      let numPinned = gBrowser._numVisiblePinTabsWithoutCollapsed;
+      let essential = draggedTab.hasAttribute("zen-essential");
+      const isDraggingFolder = isTabGroupLabel(draggedTab) && draggedTab.group?.isZenFolder;
       let allTabs = this.ariaFocusableItems;
       let tabs = allTabs.slice(
-        isPinned ? 0 : numPinned,
-        isPinned ? numPinned : undefined
+        (isPinned && essential) ? 0 : gBrowser._numZenEssentials,
+        isPinned ? (essential ? gBrowser._numZenEssentials : (isDraggingFolder ? numPinned : undefined)) : undefined
       );
+      if (draggedTab.group?.hasAttribute("split-view-group")) {
+        draggedTab = draggedTab.group.labelElement;
+      }
 
       if (this.#rtlMode) {
         tabs.reverse();
@@ -2597,7 +2670,7 @@
       let screenAxis = this.verticalMode ? "screenY" : "screenX";
       let size = this.verticalMode ? "height" : "width";
       let translateAxis = this.verticalMode ? "translateY" : "translateX";
-      let { width: tabWidth, height: tabHeight } = bounds(draggedTab);
+      let { width: tabWidth, height: tabHeight } = bounds(draggedTab.group?.hasAttribute("split-view-group") ? draggedTab.group : draggedTab);
       let translateX = event.screenX - dragData.screenX;
       let translateY = event.screenY - dragData.screenY;
 
@@ -2607,10 +2680,16 @@
       dragData.translateY = translateY;
 
       // Move the dragged tab based on the mouse position.
-      let firstTab = allTabs.at(this.#rtlMode ? -1 : 0);
-      let lastTab = allTabs.at(this.#rtlMode ? 0 : -1);
+      let firstTab = tabs.at(this.#rtlMode ? -1 : 0);
+      let lastTab = tabs.at(this.#rtlMode ? 0 : -1);
       let lastMovingTab = movingTabs.at(-1);
       let firstMovingTab = movingTabs[0];
+      if (lastMovingTab.group?.hasAttribute("split-view-group")) {
+        lastMovingTab = lastMovingTab.group;
+      }
+      if (firstMovingTab.group?.hasAttribute("split-view-group")) {
+        firstMovingTab = firstMovingTab.group;
+      }
       let endEdge = ele => ele[screenAxis] + bounds(ele)[size];
       let lastMovingTabScreen = endEdge(lastMovingTab);
       let firstMovingTabScreen = firstMovingTab[screenAxis];
@@ -2619,6 +2698,7 @@
       // Constrain the range over which the moving tabs can move between the first and last tab
       let firstBound = firstTab[screenAxis] - firstMovingTabScreen;
       let lastBound = endEdge(lastTab) - lastMovingTabScreen;
+      lastBound = gZenPinnedTabManager.getLastTabBound(lastBound, lastTab, isDraggingFolder);
 
       // Center the tab under the cursor if the tab is not under the cursor while dragging
       if (
@@ -2636,6 +2716,9 @@
           // Shift the `.tab-group-label-container` to shift the label element.
           item = item.parentElement;
         }
+        if (item.parentElement?.hasAttribute("split-view-group")) {
+          item = item.parentElement;
+        }
         item.style.transform = `${translateAxis}(${translate}px)`;
       }
 
@@ -2773,6 +2856,9 @@
             break;
           }
           let element = tabs[mid];
+          if (element?.group?.hasAttribute("split-view-group")) {
+            element = element.group.labelElement;
+          }
           let elementForSize = isTabGroupLabel(element)
             ? element.parentElement
             : element;
@@ -2792,6 +2878,8 @@
       };
 
       let dropElement = getOverlappedElement();
+      if (dropElement?.hasAttribute("split-view-group")) dropElement = dropElement.labelElement;
+      gZenPinnedTabManager.animateSeparatorMove(movingTabs, dropElement, isPinned, event);
 
       let newDropElementIndex;
       if (dropElement) {
@@ -2856,7 +2944,10 @@
       let shouldCreateGroupOnDrop;
       let dropBefore;
       if (dropElement) {
-        let dropElementForOverlap = isTabGroupLabel(dropElement)
+        if (dropElement?.group?.hasAttribute("split-view-group") || dropElement.hasAttribute("split-view-group")) {
+          dropElement = dropElement.group.labelElement ?? dropElement.labelElement;
+        }
+        let dropElementForOverlap = isTabGroupLabel(dropElement) && !dropElement.group?.hasAttribute("split-view-group")
           ? dropElement.parentElement
           : dropElement;
 
@@ -2876,7 +2967,7 @@
           ? Services.prefs.getIntPref(
               "browser.tabs.dragDrop.moveOverThresholdPercent"
             ) / 100
-          : 0.5;
+          : Services.prefs.getIntPref('zen.view.drag-and-drop.move-over-threshold') / 100;
         moveOverThreshold = Math.min(1, Math.max(0, moveOverThreshold));
         let shouldMoveOver = overlapPercent > moveOverThreshold;
         if (logicalForward && shouldMoveOver) {
@@ -2908,44 +2999,21 @@
 
         // If dragging a group over another group, don't make it look like it is
         // possible to drop the dragged group inside the other group.
-        if (
-          isTabGroupLabel(draggedTab) &&
-          dropElement?.group &&
-          !dropElement.group.collapsed
-        ) {
-          let overlappedGroup = dropElement.group;
-
-          if (isTabGroupLabel(dropElement)) {
-            dropBefore = true;
-            newDropElementIndex = dropElement.elementIndex;
-          } else {
-            dropBefore = false;
-            newDropElementIndex = overlappedGroup.tabs.at(-1).elementIndex + 1;
-          }
-
-          dropElement = overlappedGroup;
-        }
 
         // Constrain drop direction at the boundary between pinned and
         // unpinned tabs so that they don't mix together.
         let isOutOfBounds = isPinned
           ? dropElement.elementIndex >= numPinned
           : dropElement.elementIndex < numPinned;
-        if (isOutOfBounds) {
-          // Drop after last pinned tab
-          dropElement = this.ariaFocusableItems[numPinned - 1];
-          dropBefore = false;
-        }
       }
 
-      if (
-        gBrowser._tabGroupsEnabled &&
-        isTab(draggedTab) &&
-        !isPinned &&
-        (!numPinned || newDropElementIndex > numPinned)
-      ) {
+      if (isTab(draggedTab) || isTabGroupLabel(draggedTab)) {
         let dragOverGroupingThreshold = 1 - moveOverThreshold;
 
+        if (draggedTab && !dropElement?.group) {
+          gZenFolders.highlightGroupOnDragOver(null);
+        }
+
         // When dragging tab(s) over an ungrouped tab, signal to the user
         // that dropping the tab(s) will create a new tab group.
         shouldCreateGroupOnDrop =
@@ -2955,12 +3023,6 @@
           overlapPercent > dragOverGroupingThreshold;
 
         if (shouldCreateGroupOnDrop) {
-          this.#dragOverCreateGroupTimer = setTimeout(
-            () => this.#triggerDragOverCreateGroup(dragData, dropElement),
-            Services.prefs.getIntPref(
-              "browser.tabs.dragDrop.createGroup.delayMS"
-            )
-          );
         } else {
           this.removeAttribute("movingtab-createGroup");
           document
@@ -2987,19 +3049,14 @@
             dropElement = dropElementGroup;
             colorCode = undefined;
           } else if (isTabGroupLabel(dropElement)) {
-            if (dropBefore) {
-              // Dropping right before the tab group.
-              dropElement = dropElementGroup;
-              colorCode = undefined;
-            } else if (dropElementGroup.collapsed) {
-              // Dropping right after the collapsed tab group.
-              dropElement = dropElementGroup;
-              colorCode = undefined;
-            } else {
-              // Dropping right before the first tab in the tab group.
-              dropElement = dropElementGroup.tabs[0];
-              dropBefore = true;
-            }
+            ({ dropElement, colorCode, dropBefore } = gZenFolders.handleDragOverTabGroupLabel(
+              dropElement,
+              draggedTab,
+              overlapPercent,
+              movingTabs,
+              dropBefore,
+              colorCode
+            ));
           }
           this.#setDragOverGroupColor(colorCode);
           this.toggleAttribute("movingtab-ungroup", !colorCode);
@@ -3017,19 +3074,28 @@
       dragData.dropElement = dropElement;
       dragData.dropBefore = dropBefore;
       dragData.animDropElementIndex = newDropElementIndex;
-
+      gZenFolders.setFolderIndentation(movingTabs, dropElement);
       // Shift background tabs to leave a gap where the dragged tab
       // would currently be dropped.
       for (let item of tabs) {
-        if (item == draggedTab) {
+        if (item == draggedTab || (item.group?.hasAttribute("split-view-group") && item.group == draggedTab.group)) {
           continue;
         }
 
         let shift = getTabShift(item, newDropElementIndex);
         let transform = shift ? `${translateAxis}(${shift}px)` : "";
+        if (item.group?.hasAttribute("split-view-group")) {
+          item = item.group;
+        }
+        if (item.group?.hasAttribute("has-active") && draggedTab.group != item.group) {
+          item = item.group;
+        }
         if (isTabGroupLabel(item)) {
           // Shift the `.tab-group-label-container` to shift the label element.
           item = item.parentElement;
+          if (item.parentElement?.hasAttribute("split-view-group")) {
+            item = item.parentElement;
+          }
         }
         item.style.transform = transform;
       }
@@ -3082,12 +3148,14 @@
       );
     }
 
-    finishAnimateTabMove() {
-      if (!this.#isMovingTab()) {
+    finishAnimateTabMove(always = false) {
+      gZenPinnedTabManager.onDragFinish();
+      if (!this.#isMovingTab() && !always) {
         return;
       }
 
       this.#setMovingTabMode(false);
+      gZenFolders.highlightGroupOnDragOver(null);
 
       for (let item of this.ariaFocusableItems) {
         if (isTabGroupLabel(item)) {
@@ -3095,6 +3163,18 @@
           item = item.parentElement;
         }
         item.style.transform = "";
+        if (item.closest("zen-folder")?.hasAttribute("has-active")) item.closest("zen-folder").style.transform = "";
+        if (item.closest("zen-folder")?.hasAttribute("has-active")) {
+          for (let tab of item.closest("zen-folder").tabs) {
+            tab.style.transform = "";
+          }
+        }
+        if (item.closest("tab-group")?.hasAttribute("split-view-group")) item.closest("tab-group").style.transform = "";
+        if (item.closest("tab-group")?.hasAttribute("split-view-group")) {
+          for (let tab of item.closest("tab-group").tabs) {
+            tab.style.transform = "";
+          }
+        }
         item.removeAttribute("dragover-createGroup");
       }
       this.removeAttribute("movingtab-createGroup");
@@ -3116,16 +3196,15 @@
         tab.style.left = "";
         tab.style.top = "";
         tab.style.maxWidth = "";
-        tab.removeAttribute("dragtarget");
+        tab.removeAttribute("zen-dragtarget");
       }
       for (let label of draggedTabDocument.getElementsByClassName(
         "tab-group-label-container"
       )) {
         label.style.width = "";
-        label.style.height = "";
         label.style.left = "";
         label.style.top = "";
-        label.removeAttribute("dragtarget");
+        label.removeAttribute("zen-dragtarget");
       }
       let periphery = draggedTabDocument.getElementById(
         "tabbrowser-arrowscrollbox-periphery"
@@ -3198,7 +3277,7 @@
         let postTransitionCleanup = () => {
           movingTab._moveTogetherSelectedTabsData.animate = false;
         };
-        if (gReduceMotion) {
+        if (true || gReduceMotion) {
           postTransitionCleanup();
         } else {
           let onTransitionEnd = transitionendEvent => {
@@ -3371,7 +3450,7 @@
     }
 
     _notifyBackgroundTab(aTab) {
-      if (aTab.pinned || !aTab.visible || !this.overflowing) {
+      if (aTab.hasAttribute("zen-essential") || !aTab.visible || !this.overflowing) {
         return;
       }
 
@@ -3480,7 +3559,10 @@
     #getDragTarget(event, { ignoreSides = false } = {}) {
       let { target } = event;
       while (target) {
-        if (isTab(target) || isTabGroupLabel(target)) {
+        if (isTab(target) || isTabGroupLabel(target) || target?.classList?.contains("tab-group-label-container")) {
+          if (target.classList?.contains("tab-group-label-container")) {
+            target = target.querySelector(".tab-group-label");
+          }
           break;
         }
         target = target.parentNode;
@@ -3497,6 +3579,9 @@
           return null;
         }
       }
+      if (target?.group?.hasAttribute("split-view-group")) {
+        target = target.group.labelElement;
+      }
       return target;
     }
 
