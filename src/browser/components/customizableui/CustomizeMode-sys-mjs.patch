diff --git a/browser/components/customizableui/CustomizeMode.sys.mjs b/browser/components/customizableui/CustomizeMode.sys.mjs
index 619bb2af5a3a0995fc93fa040696dd2854848ab5..14ad5f6122971a0a0dc20d22acdc073f84965dad 100644
--- a/browser/components/customizableui/CustomizeMode.sys.mjs
+++ b/browser/components/customizableui/CustomizeMode.sys.mjs
@@ -500,7 +500,7 @@ export class CustomizeMode {
       this.#transitioning = true;
 
       let customizer = document.getElementById("customization-container");
-      let browser = document.getElementById("browser");
+      let browser = document.getElementById("tabbrowser-tabbox"); // ZEN: This fixes customizing mode!!! Dont remove it
       browser.hidden = true;
       customizer.hidden = false;
 
@@ -637,7 +637,7 @@ export class CustomizeMode {
     }
 
     let customizer = document.getElementById("customization-container");
-    let browser = document.getElementById("browser");
+    let browser = document.getElementById("tabbrowser-tabbox"); // ZEN: This fixes customizing mode!!! Dont remove it
     customizer.hidden = true;
     browser.hidden = false;
 
@@ -1173,6 +1173,7 @@ export class CustomizeMode {
     return (
       aNode.localName == "toolbarbutton" ||
       aNode.localName == "toolbaritem" ||
+      aNode.localName == "zen-workspace-icons" ||
       aNode.localName == "toolbarseparator" ||
       aNode.localName == "toolbarspring" ||
       aNode.localName == "toolbarspacer"
@@ -3125,6 +3126,20 @@ export class CustomizeMode {
         if (makeSpaceImmediately) {
           aDraggedOverItem.setAttribute("notransition", "true");
         }
+        if (aItem.parentElement.id === "TabsToolbar-customization-target")  {
+          // We change the border values so we can properly implement the native vertical tabs
+          // drag and drop behavior.
+          aItem.style.borderColor = "transparent";
+          if (aValue == "before") {
+            prop = "borderTopWidth";
+            otherProp = "borderBottomWidth";
+            aItem.style.borderTopStyle = "solid";
+          } else {
+            prop = "borderBottomWidth";
+            otherProp = "borderTopWidth";
+            aItem.style.borderBottomStyle = "solid";
+          }
+        }
         aDraggedOverItem.style[prop] = borderWidth + "px";
         aDraggedOverItem.style.removeProperty(otherProp);
         if (makeSpaceImmediately) {
